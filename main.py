import logging.handlers
import os
import re
import signal
import time
from typing import Optional
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    ContextTypes,
    filters,
)
from telegram.error import InvalidToken
from datetime import datetime, timedelta
import pytz
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from db import Database
import asyncio
from dotenv import load_dotenv


def setup_logging():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –ª–∏—à–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""

    log_dir = '/var/log/infinite_memory_bot'
    os.makedirs(log_dir, exist_ok=True)

    # –§–∞–π–ª —Å —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–π –¥–∞—Ç–æ–π
    today = datetime.now().strftime("%d.%m.%Y")
    log_file = os.path.join(log_dir, f'bot_{today}.log')

    # –§–æ—Ä–º–∞—Ç –ª–æ–≥–æ–≤
    formatter = logging.Formatter(
        "%(asctime)s - %(name)s - %(levelname)s - %(message)s",
        datefmt="%Y-%m-%d %H:%M:%S"
    )

    # –§–∞–π–ª–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å —Ä–æ—Ç–∞—Ü–∏–µ–π
    file_handler = logging.handlers.RotatingFileHandler(
        log_file,
        encoding='utf-8',
        maxBytes=5 * 1024 * 1024,  # 5 MB
        backupCount=3
    )
    file_handler.setFormatter(formatter)
    file_handler.setLevel(logging.INFO)

    # –ö–æ–Ω—Å–æ–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
    console_handler = logging.StreamHandler()
    console_handler.setFormatter(formatter)
    console_handler.setLevel(logging.INFO)

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ—Ä–Ω–µ–≤–æ–≥–æ –ª–æ–≥–≥–µ—Ä–∞
    root_logger = logging.getLogger()
    root_logger.setLevel(logging.INFO)

    file_handler.setLevel(logging.DEBUG)  # –í—Ä–µ–º–µ–Ω–Ω–æ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    console_handler.setLevel(logging.DEBUG)  # –í—Ä–µ–º–µ–Ω–Ω–æ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    root_logger.setLevel(logging.DEBUG)  # –í—Ä–µ–º–µ–Ω–Ω–æ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏

    # –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    for handler in root_logger.handlers[:]:
        root_logger.removeHandler(handler)

    # –û—á–∏—Å—Ç–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —É –Ω–∞—à–∏—Ö –ª–æ–≥–≥–µ—Ä–æ–≤
    for logger_name in ['__main__', 'sqlalchemy', 'telegram', 'apscheduler', 'aiohttp', 'httpx', 'httpcore']:
        logger = logging.getLogger(logger_name)
        for handler in logger.handlers[:]:
            logger.removeHandler(handler)

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–∞—à–∏—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    root_logger.addHandler(file_handler)
    root_logger.addHandler(console_handler)

    # –ñ–µ—Å—Ç–∫–æ–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è –¥–ª—è —à—É–º–Ω—ã—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫
    logging.getLogger("sqlalchemy.engine").setLevel(logging.WARNING)
    logging.getLogger("sqlalchemy.pool").setLevel(logging.WARNING)
    logging.getLogger("sqlalchemy.dialects").setLevel(logging.WARNING)
    logging.getLogger("sqlalchemy.orm").setLevel(logging.WARNING)

    logging.getLogger("telegram").setLevel(logging.WARNING)
    logging.getLogger("telegram.ext").setLevel(logging.WARNING)
    logging.getLogger("telegram.bot").setLevel(logging.WARNING)
    logging.getLogger("telegram.ext.updater").setLevel(logging.WARNING)

    logging.getLogger("apscheduler").setLevel(logging.WARNING)
    logging.getLogger("asyncio").setLevel(logging.WARNING)

    # –ù–ê–°–¢–†–ê–ò–í–ê–ï–ú HTTPX –ù–ê –õ–û–ì–ò–†–û–í–ê–ù–ò–ï –¢–û–õ–¨–ö–û –ö–ê–ñ–î–´–ï 60 –°–ï–ö–£–ù–î
    class ThrottledFilter(logging.Filter):
        def __init__(self):
            super().__init__()
            self.last_log_time = 0
            self.throttle_interval = 60  # 60 —Å–µ–∫—É–Ω–¥

        def filter(self, record):
            current_time = time.time()
            if current_time - self.last_log_time >= self.throttle_interval:
                self.last_log_time = current_time
                return True
            return False

    # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä –∫ httpx –∏ httpcore
    httpx_logger = logging.getLogger("httpx")
    httpx_logger.setLevel(logging.INFO)  # –í–∫–ª—é—á–∞–µ–º –æ–±—Ä–∞—Ç–Ω–æ
    httpx_logger.addFilter(ThrottledFilter())

    httpcore_logger = logging.getLogger("httpcore")
    httpcore_logger.setLevel(logging.INFO)  # –í–∫–ª—é—á–∞–µ–º –æ–±—Ä–∞—Ç–Ω–æ
    httpcore_logger.addFilter(ThrottledFilter())

    # –ù–∞—à –æ—Å–Ω–æ–≤–Ω–æ–π –ª–æ–≥–≥–µ—Ä
    logger = logging.getLogger(__name__)

    # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —É –Ω–∞—à–µ–≥–æ –ª–æ–≥–≥–µ—Ä–∞ –Ω–µ—Ç –ª–∏—à–Ω–∏—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    for handler in logger.handlers[:]:
        logger.removeHandler(handler)
    logger.addHandler(file_handler)
    logger.addHandler(console_handler)

    logger.info("=" * 50)
    logger.info(f"–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ –≤ —Ñ–∞–π–ª: {log_file}")
    logger.info("SQLAlchemy echo: DISABLED")
    logger.info("httpx/httpcore logging: THROTTLED (60s)")
    logger.info("=" * 50)

    return logger


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logger = setup_logging()

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞
BOT_TOKEN = os.getenv("BOT_TOKEN")
if not BOT_TOKEN:
    logger.error("BOT_TOKEN environment variable is not set")
    raise ValueError("BOT_TOKEN environment variable is not set")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
db = Database()
scheduler = AsyncIOScheduler(timezone="UTC")

# –û—Å–Ω–æ–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
MAIN_KEYBOARD = ReplyKeyboardMarkup(
    [["–ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å", "–î–æ–±–∞–≤–∏—Ç—å —Ç–µ–º—É"], ["–£–¥–∞–ª–∏—Ç—å —Ç–µ–º—É", "–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–µ–º—É"], ["–ö–∞—Ç–µ–≥–æ—Ä–∏–∏"]],
    resize_keyboard=True
)

# –õ–∏–º–∏—Ç—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
MAX_ACTIVE_TOPICS = 60
MAX_CATEGORIES = 10


def parse_utc_offset(text: str) -> tuple:
    """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç UTC-—Å–º–µ—â–µ–Ω–∏–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç (timezone, display_name)."""
    if not text:
        return None, None

    text = text.strip().replace(" ", "").upper()

    # –£–±–∏—Ä–∞–µ–º 'UTC' –µ—Å–ª–∏ –µ—Å—Ç—å
    text = text.replace("UTC", "")

    # –î–æ–±–∞–≤–ª—è–µ–º '+' –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç –∏ —Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ —Ü–∏—Ñ—Ä
    if text and text[0] not in ['+', '-'] and text.lstrip('+-').isdigit():
        text = '+' + text

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç: [+-]—á–∏—Å–ª–æ
    match = re.match(r'^([+-])?(\d{1,2})$', text)
    if not match:
        return None, None

    sign, offset_str = match.groups()
    sign = sign or '+'

    try:
        offset = int(sign + offset_str)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω
        if not -12 <= offset <= 14:
            return None, None

        # –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è Etc/GMT
        gmt_sign = '-' if offset > 0 else '+'
        gmt_offset = abs(offset)
        timezone = f"Etc/GMT{gmt_sign}{gmt_offset}"

        # –ü–æ–Ω—è—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        display_name = f"UTC{sign}{offset_str}" if offset != 0 else "UTC"

        return timezone, display_name

    except ValueError:
        return None, None


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.debug(f"Received /start command from user {update.effective_user.id}")
    user = db.get_user(update.effective_user.id)
    if user:
        await update.message.reply_text(
            f"–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {update.effective_user.first_name}! üò∫\n"
            f"–¢–≤–æ–π —Ç–µ–∫—É—â–∏–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å: {user.timezone}\n"
            "–•–æ—á–µ—à—å –∏–∑–º–µ–Ω–∏—Ç—å? –ò—Å–ø–æ–ª—å–∑—É–π /tz\n"
            "–ü–æ–º–æ—â—å: /help\n\n"
            "–ü–æ–º–Ω–∏: —Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è = –∑–Ω–∞–Ω–∏—è –Ω–∞–≤—Å–µ–≥–¥–∞! üöÄ",
            reply_markup=MAIN_KEYBOARD
        )
    else:
        await update.message.reply_text(
            "üöÄ *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ç–≤–æ–µ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Ç—Ä–µ–Ω–µ—Ä–∞ –ø–∞–º—è—Ç–∏!*\n\n"

            "üí° *–ó–Ω–∞–µ—à—å –ª–∏ —Ç—ã —á—Ç–æ?*\n"
            "‚Ä¢ 90% –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –º—ã –∑–∞–±—ã–≤–∞–µ–º –∑–∞ –ø–µ—Ä–≤—ã–µ 24 —á–∞—Å–∞\n"
            "‚Ä¢ –ë–µ–∑ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π –∑–Ω–∞–Ω–∏—è –ø—Ä–æ—Å—Ç–æ \"–∏—Å–ø–∞—Ä—è—é—Ç—Å—è\"\n"
            "‚Ä¢ –ú–æ–∂–Ω–æ —É—á–∏—Ç—å —á–∞—Å–∞–º–∏ –∏ –Ω–µ –∑–∞–ø–æ–º–Ω–∏—Ç—å –Ω–∏—á–µ–≥–æ\n\n"

            "üéØ *–ê —Ç–µ–ø–µ—Ä—å —Ö–æ—Ä–æ—à–∏–µ –Ω–æ–≤–æ—Å—Ç–∏:*\n"
            "–ï—Å—Ç—å –Ω–∞—É—á–Ω—ã–π —Å–ø–æ—Å–æ–± –∑–∞–ø–æ–º–∏–Ω–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é *–Ω–∞–≤—Å–µ–≥–¥–∞*!\n\n"

            "üî¨ *–ú–µ—Ç–æ–¥ –∏–Ω—Ç–µ—Ä–≤–∞–ª—å–Ω–æ–≥–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è:*\n"
            "–Ø –Ω–∞–ø–æ–º–∏–Ω–∞—é –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –≤ –∏–¥–µ–∞–ª—å–Ω—ã–µ –º–æ–º–µ–Ω—Ç—ã:\n"
            "‚Ä¢ –ö–æ–≥–¥–∞ —Ç—ã –≤–æ—Ç-–≤–æ—Ç –∑–∞–±—É–¥–µ—à—å\n"
            "‚Ä¢ –ß—Ç–æ–±—ã –∑–∞–∫—Ä–µ–ø–∏—Ç—å –≤ –¥–æ–ª–≥–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–π –ø–∞–º—è—Ç–∏\n"
            "‚Ä¢ –ë–µ–∑ –ª–∏—à–Ω–∏—Ö —É—Å–∏–ª–∏–π —Å —Ç–≤–æ–µ–π —Å—Ç–æ—Ä–æ–Ω—ã\n\n"

            "üìä *–í—Å–µ–≥–æ 7 –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π = –∑–Ω–∞–Ω–∏–µ –Ω–∞ –≥–æ–¥—ã:*\n"
            "1 —á–∞—Å ‚Üí 1 –¥–µ–Ω—å ‚Üí 3 –¥–Ω—è ‚Üí 1 –Ω–µ–¥–µ–ª—è ‚Üí 2 –Ω–µ–¥–µ–ª–∏ ‚Üí 1 –º–µ—Å—è—Ü ‚Üí 3 –º–µ—Å—è—Ü–∞\n\n"

            "‚ú® *–ß—Ç–æ —ç—Ç–æ —Ç–µ–±–µ –¥–∞—ë—Ç:*\n"
            "‚Ä¢ –ó–∞–ø–æ–º–∏–Ω–∞–µ—à—å –≤ 3 —Ä–∞–∑–∞ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–µ–µ\n"
            "‚Ä¢ –¢—Ä–∞—Ç–∏—à—å –≤—Å–µ–≥–æ 5-15 –º–∏–Ω—É—Ç –≤ –¥–µ–Ω—å\n"
            "‚Ä¢ –ó–Ω–∞–Ω–∏—è –æ—Å—Ç–∞—é—Ç—Å—è —Å —Ç–æ–±–æ–π –Ω–∞–≤—Å–µ–≥–¥–∞\n"
            "‚Ä¢ –£—á–∏—à—å—Å—è –±–µ–∑ —Å—Ç—Ä–µ—Å—Å–∞ –∏ –Ω–∞–ø—Ä—è–∂–µ–Ω–∏—è\n\n"

            "üéØ *–ù–∞—á–Ω–∏ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å:*\n"
            "1. –í—ã–±–µ—Ä–∏ —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å (—á—Ç–æ–±—ã –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø—Ä–∏—Ö–æ–¥–∏–ª–∏ –≤–æ–≤—Ä–µ–º—è)\n"
            "2. –î–æ–±–∞–≤—å –ø–µ—Ä–≤—É—é —Ç–µ–º—É\n"
            "3. –û—Ç–º–µ—á–∞–π –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è –∫–æ–≥–¥–∞ —è –Ω–∞–ø–æ–º–∏–Ω–∞—é\n"
            "4. –°–ª–µ–¥–∏ –∫–∞–∫ —Ä–∞—Å—Ç—ë—Ç —Ç–≤–æ—è —ç—Ä—É–¥–∏—Ü–∏—è!\n\n"

            "‚è∞ *–í—ã–±–µ—Ä–∏ —Å–≤–æ–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å:*\n"
            "–ù–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'Europe/Moscow') –∏–ª–∏ —Å–º–µ—â–µ–Ω–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'UTC+3')\n"
            "–ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π /tz –¥–ª—è –≤—ã–±–æ—Ä–∞ –∏–∑ —Å–ø–∏—Å–∫–∞",
            reply_markup=ReplyKeyboardMarkup([["/tz"]], resize_keyboard=True),
            parse_mode="Markdown"
        )
    logger.debug(f"Sent start response to user {update.effective_user.id}")


async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    logger.debug(f"Received /help command from user {user_id}")

    help_text = (
        "üöÄ –¢–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Ç—Ä–µ–Ω–µ—Ä –ø–∞–º—è—Ç–∏ - –∑–∞–ø–æ–º–∏–Ω–∞–π –Ω–∞–≤—Å–µ–≥–¥–∞!\n\n"

        "üí° –ù–∞—É—á–Ω—ã–π –ø–æ–¥—Ö–æ–¥ –∫ –∑–∞–ø–æ–º–∏–Ω–∞–Ω–∏—é:\n"
        "–ù–∞—à –º–æ–∑–≥ –∑–∞–±—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–π –∫—Ä–∏–≤–æ–π (–∫—Ä–∏–≤–∞—è –≠–±–±–∏–Ω–≥–∞—É–∑–∞). "
        "90% –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∑–∞–±—ã–≤–∞–µ—Ç—Å—è –∑–∞ –ø–µ—Ä–≤—ã–µ 24 —á–∞—Å–∞, –µ—Å–ª–∏ –µ—ë –Ω–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å!\n\n"

        "üéØ –ü–æ—á–µ–º—É –∏–º–µ–Ω–Ω–æ —Ç–∞–∫–∞—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å?\n"
        "1 —á–∞—Å - —Ñ–∏–∫—Å–∏—Ä—É–µ–º –≤ –∫—Ä–∞—Ç–∫–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–π –ø–∞–º—è—Ç–∏\n"
        "1 –¥–µ–Ω—å - –ø–µ—Ä–µ–Ω–æ—Å–∏–º –≤ —Å—Ä–µ–¥–Ω–µ—Å—Ä–æ—á–Ω—É—é –ø–∞–º—è—Ç—å  \n"
        "3 –¥–Ω—è - —É—Å–∏–ª–∏–≤–∞–µ–º –Ω–µ–π—Ä–æ–Ω–Ω—ã–µ —Å–≤—è–∑–∏\n"
        "1-2 –Ω–µ–¥–µ–ª–∏ - –∑–∞–∫—Ä–µ–ø–ª—è–µ–º –≤ –¥–æ–ª–≥–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–π –ø–∞–º—è—Ç–∏\n"
        "1-3 –º–µ—Å—è—Ü–∞ - –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–æ —Ñ–∏–∫—Å–∏—Ä—É–µ–º\n\n"

        "üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: –ü–æ—Å–ª–µ 7 –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –≤ –¥–æ–ª–≥–æ–≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–º—è—Ç—å "
        "–∏ –æ—Å—Ç–∞—ë—Ç—Å—è —Å —Ç–æ–±–æ–π –Ω–∞ –≥–æ–¥—ã!\n\n"

        "üî¨ –≠—Ç–æ –Ω–µ –ø—Ä–æ—Å—Ç–æ —Ü–∏—Ñ—Ä—ã:\n"
        "–ú–µ—Ç–æ–¥ –∏–Ω—Ç–µ—Ä–≤–∞–ª—å–Ω–æ–≥–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è –Ω–∞—É—á–Ω–æ –¥–æ–∫–∞–∑–∞–Ω –∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è:\n"
        "‚Ä¢ –í –æ–±—É—á–µ–Ω–∏–∏ –≤—Ä–∞—á–µ–π –∏ –ø–∏–ª–æ—Ç–æ–≤\n"
        "‚Ä¢ –ü—Ä–∏ –∏–∑—É—á–µ–Ω–∏–∏ –∏–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã—Ö —è–∑—ã–∫–æ–≤\n"
        "‚Ä¢ –í –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –∫ —Å–µ—Ä—å—ë–∑–Ω—ã–º —ç–∫–∑–∞–º–µ–Ω–∞–º\n"
        "‚Ä¢ –°–ø–æ—Ä—Ç—Å–º–µ–Ω–∞–º–∏ –¥–ª—è –∑–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —Ç–∞–∫—Ç–∏–∫\n\n"

        "üéØ –ß—Ç–æ –º–æ–∂–Ω–æ —É—á–∏—Ç—å:\n"
        "‚Ä¢ –ò–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã–µ —Å–ª–æ–≤–∞ –∏ —Ñ—Ä–∞–∑—ã\n"
        "‚Ä¢ –ù–∞—É—á–Ω—ã–µ —Ç–µ—Ä–º–∏–Ω—ã –∏ —Ñ–æ—Ä–º—É–ª—ã\n"
        "‚Ä¢ –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞—Ç—ã –∏ —Ñ–∞–∫—Ç—ã\n"
        "‚Ä¢ –ö–æ–¥ –∏ –∞–ª–≥–æ—Ä–∏—Ç–º—ã\n"
        "‚Ä¢ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ —ç–∫–∑–∞–º–µ–Ω–∞–º\n"
        "‚Ä¢ –ò –≤—Å—ë —á—Ç–æ —É–≥–æ–¥–Ω–æ!\n\n"

        "üõ† –ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç:\n"
        "1. –î–æ–±–∞–≤—å —Ç–µ–º—É - –Ω–∞—á–Ω–∏ —Å 2-3 —Ç–µ–º\n"
        "2. –û—Ç–º–µ—á–∞–π ¬´–ü–æ–≤—Ç–æ—Ä–∏–ª!¬ª –ø–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º\n"
        "3. –°–ª–µ–¥–∏ –∑–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º - —Å–º–æ—Ç—Ä–∏ –∫–∞–∫ –∑–Ω–∞–Ω–∏—è –∑–∞–∫—Ä–µ–ø–ª—è—é—Ç—Å—è\n"
        "4. –î–æ—Å—Ç–∏–≥–∞–π 100% - –ø–æ–ª—É—á–∞–π –∑–Ω–∞–Ω–∏—è –Ω–∞–≤—Å–µ–≥–¥–∞!\n\n"

        "üìã –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "‚Ä¢ –î–æ–±–∞–≤–∏—Ç—å —Ç–µ–º—É - —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é —Ç–µ–º—É\n"
        "‚Ä¢ –ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å - —É–≤–∏–¥–µ—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å\n"
        "‚Ä¢ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ - –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞—Ç—å —Ç–µ–º—ã\n"
        "‚Ä¢ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–µ–º—É - –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–≤–µ—Ä—à—ë–Ω–Ω–æ–µ\n\n"

        "üí´ –ü–æ–ø—Ä–æ–±—É–π –≤—Å–µ–≥–æ 1 —Ç–µ–º—É –∏ —É–≤–∏–¥–∏—à—å –∫–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç!\n"
        "–ß–µ—Ä–µ–∑ –Ω–µ–¥–µ–ª—é —Ç—ã —É–¥–∏–≤–∏—à—å—Å—è —Å–∫–æ–ª—å–∫–æ –∑–∞–ø–æ–º–Ω–∏–ª –±–µ–∑ —É—Å–∏–ª–∏–π.\n\n"

        "üéâ –ì–æ—Ç–æ–≤ –Ω–∞—á–∞—Ç—å? –ù–∞–∂–º–∏ ¬´–î–æ–±–∞–≤–∏—Ç—å —Ç–µ–º—É¬ª –∏ —É–±–µ–¥–∏—Å—å —Å–∞–º!\n\n"
        "‚ùì –ï—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã? –ü–∏—à–∏: @garage_pineapple"
    )

    await update.message.reply_text(
        help_text,
        reply_markup=MAIN_KEYBOARD
    )
    logger.debug(f"Sent help response to user {user_id}")


async def reset(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    context.user_data["state"] = None
    context.user_data.clear()
    await update.message.reply_text(
        "–°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–±—Ä–æ—à–µ–Ω–æ! üò∫",
        reply_markup=MAIN_KEYBOARD
    )
    logger.debug(f"User {user_id} reset state")


async def handle_timezone(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    text = update.message.text.split(maxsplit=1)[1] if len(update.message.text.split()) > 1 else None
    logger.debug(f"User {user_id} sent timezone command: {text}")

    if text == "list":
        await update.message.reply_text(
            "–ü–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ —á–∞—Å–æ–≤—ã—Ö –ø–æ—è—Å–æ–≤: https://en.wikipedia.org/wiki/List_of_tz_database_time_zones\n"
            "–û—Ç–ø—Ä–∞–≤—å –Ω–∞–∑–≤–∞–Ω–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'Europe/Moscow') –∏–ª–∏ —Å–º–µ—â–µ–Ω–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'UTC+8' –∏–ª–∏ '+8').",
            reply_markup=MAIN_KEYBOARD
        )
        return

    if text:
        timezone = parse_utc_offset(text)
        if timezone:
            try:
                pytz.timezone(timezone)
                db.save_user(user_id, update.effective_user.username or "", timezone)
                logger.debug(f"User {user_id} saved with timezone {timezone} (from UTC offset {text})")
                await update.message.reply_text(
                    f"–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å {timezone} (UTC{text}) —Å–æ—Ö—Ä–∞–Ω–µ–Ω! üò∫",
                    reply_markup=MAIN_KEYBOARD
                )
                schedule_daily_check(user_id, timezone)
                context.user_data["state"] = None
                return
            except Exception as e:
                logger.error(f"Error validating UTC timezone {timezone}: {str(e)}")
        try:
            pytz.timezone(text)
            db.save_user(user_id, update.effective_user.username or "", text)
            logger.debug(f"User {user_id} saved with timezone {text}")
            await update.message.reply_text(
                f"–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å {text} —Å–æ—Ö—Ä–∞–Ω–µ–Ω! üò∫",
                reply_markup=MAIN_KEYBOARD
            )
            schedule_daily_check(user_id, text)
            context.user_data["state"] = None
            return
        except Exception as e:
            logger.error(f"Error saving user timezone: {str(e)}")
            await update.message.reply_text(
                "–û–π, —á—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫ —Å —á–∞—Å–æ–≤—ã–º –ø–æ—è—Å–æ–º. üòî –ü–æ–ø—Ä–æ–±—É–π –Ω–∞–∑–≤–∞–Ω–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'Europe/Moscow') –∏–ª–∏ —Å–º–µ—â–µ–Ω–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'UTC+8' –∏–ª–∏ '+8').",
                reply_markup=MAIN_KEYBOARD
            )
        return

    keyboard = [
        [
            InlineKeyboardButton("Europe/Moscow (MSK, UTC+3)", callback_data="tz:Europe/Moscow"),
            InlineKeyboardButton("America/New_York (EST, UTC-5)", callback_data="tz:America/New_York"),
        ],
        [
            InlineKeyboardButton("Europe/London (GMT, UTC+0)", callback_data="tz:Europe/London"),
            InlineKeyboardButton("Asia/Tokyo (JST, UTC+9)", callback_data="tz:Asia/Tokyo"),
        ],
        [InlineKeyboardButton("–î—Ä—É–≥–æ–π (–≤–≤–µ–¥–∏ –≤—Ä—É—á–Ω—É—é)", callback_data="tz:manual")],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏ —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –∏–ª–∏ –≤–≤–µ–¥–∏ –µ–≥–æ –≤—Ä—É—á–Ω—É—é (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'Europe/Moscow' –∏–ª–∏ 'UTC+8'):",
        reply_markup=reply_markup
    )
    context.user_data["state"] = "awaiting_timezone"
    logger.debug(f"User {user_id} prompted to select timezone")


async def show_progress(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user = db.get_user(user_id)
    if not user:
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å —Å –ø–æ–º–æ—â—å—é /start –∏–ª–∏ /tz.",
            reply_markup=ReplyKeyboardMarkup([["/tz"]], resize_keyboard=True)
        )
        return

    # –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–µ–º –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ª–∏–º–∏—Ç–µ
    all_active_topics = db.get_active_topics(user_id, user.timezone, category_id='all')

    categories = db.get_categories(user_id)
    keyboard = [
        [InlineKeyboardButton(category.category_name, callback_data=f"category_progress:{category.category_id}")]
        for category in categories
    ]
    keyboard.append([InlineKeyboardButton("üìÅ –ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏", callback_data="category_progress:none")])
    reply_markup = InlineKeyboardMarkup(keyboard)

    text = f"üìä –ê–∫—Ç–∏–≤–Ω—ã—Ö —Ç–µ–º: {len(all_active_topics)}/{MAX_ACTIVE_TOPICS}\n"
    text += "–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞:"

    if update.callback_query:
        await update.callback_query.edit_message_text(
            text,
            reply_markup=reply_markup
        )
    else:
        await update.message.reply_text(
            text,
            reply_markup=reply_markup
        )
    context.user_data["state"] = "awaiting_category_progress"
    logger.debug(f"User {user_id} requested progress, showing category selection")


async def show_category_progress(update: Update, context: ContextTypes.DEFAULT_TYPE, category_id: Optional[int],
                                 timezone: str):
    user_id = update.effective_user.id
    logger.debug(f"User {user_id} requested progress for category {category_id}")
    topics = db.get_active_topics(user_id, timezone, category_id=category_id)
    total_repetitions = 7
    category_name = db.get_category(category_id, user_id).category_name if category_id else "üìÅ –ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"

    if not topics:
        reply_markup = InlineKeyboardMarkup([[InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_to_progress")]])
        text = f"–í –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category_name}' –ø–æ–∫–∞ –Ω–µ—Ç —Ç–µ–º! üòø"

        if update.callback_query:
            await update.callback_query.edit_message_text(
                text,
                reply_markup=reply_markup
            )
            await update.callback_query.answer()
        else:
            await update.message.reply_text(
                text,
                reply_markup=reply_markup
            )
        return

    tz = pytz.timezone(timezone)
    now_utc = datetime.utcnow()
    now_local = pytz.utc.localize(now_utc).astimezone(tz)
    message = f"üìö {category_name} ({timezone}) üò∫\n\n"

    for topic in topics:
        next_review_local = db._from_utc_naive(topic.next_review, timezone) if topic.next_review else None
        progress_percentage = (topic.completed_repetitions / total_repetitions) * 100
        progress_bar = "‚ñà" * int(topic.completed_repetitions) + "‚ñë" * (total_repetitions - topic.completed_repetitions)
        if topic.is_completed:
            status = "–ó–∞–≤–µ—Ä—à–µ–Ω–æ"
        elif next_review_local:
            status = next_review_local.strftime('%d.%m.%Y %H:%M') if next_review_local > now_local else "–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–æ"
        else:
            status = "–ó–∞–≤–µ—Ä—à–µ–Ω–æ"
        message += (
            f"üìñ {topic.topic_name}\n"
            f"‚è∞ –°–ª–µ–¥—É—é—â–µ–µ: {status}\n"
            f"‚úÖ –ü—Ä–æ–≥—Ä–µ—Å—Å: {progress_bar} {topic.completed_repetitions}/{total_repetitions} ({progress_percentage:.1f}%)\n"
            f"‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
        )

    reply_markup = InlineKeyboardMarkup([[InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_to_progress")]])
    try:
        if update.callback_query:
            await update.callback_query.edit_message_text(
                message,
                reply_markup=reply_markup
            )
            await update.callback_query.answer()
        else:
            await update.message.reply_text(
                message,
                reply_markup=reply_markup
            )
    except Exception as e:
        logger.error(f"Error sending category progress for user {user_id}, category {category_id}: {str(e)}")
        error_message = "–û–π, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞! üòø –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π /reset."
        if update.callback_query:
            await update.callback_query.edit_message_text(
                error_message,
                reply_markup=reply_markup
            )
            await update.callback_query.answer()
        else:
            await update.message.reply_text(
                error_message,
                reply_markup=reply_markup
            )


async def handle_timezone_callback(query, context, parts, user_id):
    timezone = parts[1] if len(parts) > 1 else None
    if timezone == "manual":
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –î–û –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
        context.user_data["state"] = "awaiting_manual_timezone"
        await query.message.reply_text(
            "‚å®Ô∏è –í–≤–µ–¥–∏ —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –≤—Ä—É—á–Ω—É—é:\n\n"
            "‚Ä¢ –ù–∞–∑–≤–∞–Ω–∏–µ: Europe/Moscow, Asia/Tokyo, America/New_York\n"
            "‚Ä¢ –°–º–µ—â–µ–Ω–∏–µ: +3, UTC+3, -5, UTC-5\n"
            "‚Ä¢ –ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π /tz list –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞"
        )
        logger.debug(f"User {user_id} set state to: awaiting_manual_timezone")
    else:
        try:
            db.save_user(user_id, query.from_user.username or "", timezone)
            schedule_daily_check(user_id, timezone)

            # –í–ê–ñ–ù–û: –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            context.user_data["state"] = None
            context.user_data.clear()

            await query.message.reply_text(
                f"–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å {timezone} —Å–æ—Ö—Ä–∞–Ω–µ–Ω! üò∫",
                reply_markup=MAIN_KEYBOARD
            )
            logger.info(f"User {user_id} set timezone to {timezone}")
        except Exception as e:
            logger.error(f"Error saving timezone for user {user_id}: {str(e)}")
            await query.message.reply_text(
                "–û–π, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞. üòî –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞!",
                reply_markup=MAIN_KEYBOARD
            )

    await query.answer()


async def handle_repeated_callback(query, context, parts, user_id, user):
    reminder_id = int(parts[1]) if len(parts) > 1 else None
    if not reminder_id:
        await query.answer("–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã")
        return

    # –ï–¥–∏–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏ —Ç–µ–º—ã
    reminder = db.get_reminder(reminder_id)
    if not reminder:
        await query.answer("–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –í–æ–∑–º–æ–∂–Ω–æ, —Ç–µ–º–∞ –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞. üòø")
        await query.message.delete()
        return

    topic = db.get_topic_by_reminder_id(reminder_id, user_id, user.timezone)
    if not topic:
        await query.answer("–¢–µ–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω–∞ –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞. üòø")
        await query.message.delete()
        return

    topic_name = topic.topic_name
    logger.info(f"USER_ACTION: User {user_id} marked topic '{topic_name}' as repeated (reminder_id: {reminder_id})")
    result = db.mark_topic_repeated_by_reminder(reminder_id, user_id, user.timezone)

    if not result:
        await query.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ—Ç–∫–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è. üòî")
        return

    completed_repetitions, next_reminder_time, new_reminder_id = result
    total_repetitions = 7
    progress_percentage = (completed_repetitions / total_repetitions) * 100
    progress_bar = "‚ñà" * completed_repetitions + "‚ñë" * (total_repetitions - completed_repetitions)

    tz = pytz.timezone(user.timezone)
    message = ""

    if completed_repetitions < total_repetitions:
        next_reminder_str = db._from_utc_naive(next_reminder_time, user.timezone).strftime("%d.%m.%Y %H:%M")
        if new_reminder_id:
            scheduler.add_job(
                send_reminder,
                "date",
                run_date=db._from_utc_naive(next_reminder_time, user.timezone),
                args=[app.bot, user_id, topic_name, new_reminder_id],
                id=f"reminder_{new_reminder_id}_{user_id}",
                timezone=tz,
                misfire_grace_time=None
            )
        message = (
            f"–¢–µ–º–∞ '{topic_name}' –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –ø–æ–≤—Ç–æ—Ä—ë–Ω–Ω–∞—è! üò∫\n"
            f"–ó–∞–≤–µ—Ä—à–µ–Ω–æ: {completed_repetitions}/{total_repetitions} –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π\n"
            f"–°–ª–µ–¥—É—é—â–µ–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ: {next_reminder_str}\n"
            f"–ü—Ä–æ–≥—Ä–µ—Å—Å: {progress_bar} {progress_percentage:.1f}%"
        )
    else:
        message = (
            f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è—é, —Ç—ã –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—Å–≤–æ–∏–ª —Ç–µ–º—É '{topic_name}'! üèÜ\n"
            f"–ó–∞–≤–µ—Ä—à–µ–Ω–æ: {completed_repetitions}/{total_repetitions} –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π\n"
            f"–ü—Ä–æ–≥—Ä–µ—Å—Å: {progress_bar} {progress_percentage:.1f}%\n"
            f"–ï—Å–ª–∏ –∑–∞—Ö–æ—á–µ—à—å –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –µ—ë –∑–∞–Ω–æ–≤–æ, –∏—Å–ø–æ–ª—å–∑—É–π '–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–µ–º—É'. üò∫"
        )

    await query.message.delete()
    await query.message.reply_text(
        message,
        reply_markup=MAIN_KEYBOARD
    )
    logger.debug(f"User {user_id} marked topic '{topic_name}' as repeated via button")


async def handle_add_topic_category(query, context, parts, user_id, user):
    category_id_str = parts[1] if len(parts) > 1 else None
    category_id = int(category_id_str) if category_id_str and category_id_str != "none" else None
    topic_name = context.user_data.get("new_topic_name")

    if topic_name:
        try:
            topic_id, reminder_id = db.add_topic(user_id, topic_name, user.timezone, category_id)
            tz = pytz.timezone(user.timezone)

            # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–µ–º—ã
            category_name = db.get_category(category_id, user_id).category_name if category_id else "–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"
            logger.info(
                f"USER_ACTION: User {user_id} added topic '{topic_name}' to category '{category_name}' (topic_id: {topic_id})")

            # –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
            reminder_time = db._from_utc_naive(db.get_reminder(reminder_id).scheduled_time, user.timezone)
            logger.info(
                f"REMINDER_SCHEDULED: Topic '{topic_name}' reminder scheduled for {reminder_time.strftime('%Y-%m-%d %H:%M')} (reminder_id: {reminder_id})")

            scheduler.add_job(
                send_reminder,
                "date",
                run_date=reminder_time,
                args=[app.bot, user_id, topic_name, reminder_id],
                id=f"reminder_{reminder_id}_{user_id}",
                timezone=tz,
                misfire_grace_time=None
            )
            await query.message.delete()
            await query.message.reply_text(
                f"–¢–µ–º–∞ '{topic_name}' –¥–æ–±–∞–≤–ª–µ–Ω–∞! üò∫ –ü–µ—Ä–≤–æ–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 1 —á–∞—Å.",
                reply_markup=MAIN_KEYBOARD
            )
        except Exception as e:
            logger.error(f"Error adding topic '{topic_name}' for user {user_id}: {str(e)}")
            await query.message.delete()
            await query.message.reply_text(
                "–û–π, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–µ–º—ã. üòî –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞!",
                reply_markup=MAIN_KEYBOARD
            )

    context.user_data["state"] = None
    context.user_data.pop("new_topic_name", None)


async def handle_delete_topic(query, context, parts, user_id):
    topic_id = int(parts[1]) if len(parts) > 1 else None

    # –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º —Ç–µ–º—É –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    user = db.get_user(user_id)
    topic = db.get_topic(topic_id, user_id, user.timezone if user else "UTC")
    topic_name = topic.topic_name if topic else "Unknown"

    # –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º –≤—Å–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –î–û —É–¥–∞–ª–µ–Ω–∏—è —Ç–µ–º—ã
    reminders = db.get_reminders_by_topic(topic_id)

    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ø—ã—Ç–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è
    logger.info(f"USER_ACTION: User {user_id} attempting to delete topic '{topic_name}' (topic_id: {topic_id})")

    if db.delete_topic(topic_id, user_id):
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è —Ç–µ–º—ã
        logger.info(f"TOPIC_DELETED: User {user_id} successfully deleted topic '{topic_name}' (topic_id: {topic_id})")
        logger.info(f"REMINDER_CLEANUP: Removing {len(reminders)} reminders for deleted topic '{topic_name}'")

        # –£–¥–∞–ª—è–µ–º –≤—Å–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —ç—Ç–æ–π —Ç–µ–º—ã –∏–∑ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
        removed_jobs_count = 0
        for reminder in reminders:
            job_id = f"reminder_{reminder.reminder_id}_{user_id}"
            job = scheduler.get_job(job_id)
            if job:
                job.remove()
                removed_jobs_count += 1
                logger.info(f"REMINDER_REMOVED: Removed scheduled job {job_id} for topic '{topic_name}'")
            else:
                logger.debug(f"REMINDER_NOT_FOUND: Job {job_id} not found in scheduler (maybe already executed)")

        logger.info(f"REMINDER_CLEANUP_COMPLETE: Removed {removed_jobs_count} scheduled jobs for topic '{topic_name}'")

        await query.message.delete()
        await query.message.reply_text(
            "–¢–µ–º–∞ –∏ –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —É–¥–∞–ª–µ–Ω—ã! üòø",
            reply_markup=MAIN_KEYBOARD
        )
        logger.debug(f"User {user_id} deleted topic {topic_id} with all reminders")
    else:
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ—É–¥–∞—á–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è
        logger.warning(f"TOPIC_DELETE_FAILED: Topic {topic_id} not found for user {user_id}")
        await query.message.delete()
        await query.message.reply_text(
            "–¢–µ–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. üòø",
            reply_markup=MAIN_KEYBOARD
        )
    context.user_data["state"] = None


async def handle_restore_topic(query, context, parts, user_id, user):
    completed_topic_id = int(parts[1]) if len(parts) > 1 else None
    result = db.restore_topic(completed_topic_id, user_id, user.timezone)

    if result:
        topic_id, topic_name = result
        reminder_id = db.get_reminder_by_topic(topic_id).reminder_id
        tz = pytz.timezone(user.timezone)
        scheduler.add_job(
            send_reminder,
            "date",
            run_date=db._from_utc_naive(db.get_reminder(reminder_id).scheduled_time, user.timezone),
            args=[app.bot, user_id, topic_name, reminder_id],
            id=f"reminder_{reminder_id}_{user_id}",
            timezone=tz,
            misfire_grace_time=None
        )
        await query.message.delete()
        await query.message.reply_text(
            f"–¢–µ–º–∞ '{topic_name}' –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞! üò∫ –ü–µ—Ä–≤–æ–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 1 —á–∞—Å.",
            reply_markup=MAIN_KEYBOARD
        )
        logger.debug(f"User {user_id} restored topic {topic_name}")
    else:
        await query.message.delete()
        await query.message.reply_text(
            "–¢–µ–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. üòø",
            reply_markup=MAIN_KEYBOARD
        )
    context.user_data["state"] = None


async def handle_category_action(query, context, parts, user_id):
    action = parts[1] if len(parts) > 1 else None

    if action == "create":
        # –ü–†–û–í–ï–†–ö–ê –õ–ò–ú–ò–¢–ê –°–†–ê–ó–£ –ü–†–ò –í–´–ë–û–†–ï "–°–û–ó–î–ê–¢–¨ –ö–ê–¢–ï–ì–û–†–ò–Æ"
        categories = db.get_categories(user_id)
        if len(categories) >= MAX_CATEGORIES:
            await query.message.reply_text(
                f"‚ùå –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π ({MAX_CATEGORIES})! üòø\n\n"
                f"–ß—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é, —Å–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª–∏ –æ–¥–Ω—É –∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö.\n"
                f"–°–µ–π—á–∞—Å —É —Ç–µ–±—è {len(categories)} –∫–∞—Ç–µ–≥–æ—Ä–∏–π.",
                reply_markup=MAIN_KEYBOARD
            )
            logger.info(f"LIMIT_REACHED: User {user_id} reached category limit ({len(categories)}/{MAX_CATEGORIES})")
            context.user_data["state"] = None
            return

        context.user_data["state"] = "awaiting_category_name"
        await query.message.reply_text(
            "–ù–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏! üòä",
            reply_markup=ReplyKeyboardMarkup([["–û—Ç–º–µ–Ω–∞"]], resize_keyboard=True)
        )

        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        logger.info(f"USER_ACTION: User {user_id} starting to create new category ({len(categories)}/{MAX_CATEGORIES})")
    elif action == "rename":
        categories = db.get_categories(user_id)
        if not categories:
            await query.message.reply_text(
                "–£ —Ç–µ–±—è –Ω–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è! üòø",
                reply_markup=MAIN_KEYBOARD
            )
            context.user_data["state"] = None
            return

        keyboard = [
            [InlineKeyboardButton(category.category_name, callback_data=f"rename_category:{category.category_id}")]
            for category in categories
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.message.reply_text(
            "–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è:", reply_markup=reply_markup
        )
        context.user_data["state"] = "awaiting_category_rename"

    elif action == "delete":
        categories = db.get_categories(user_id)
        if not categories:
            await query.message.reply_text(
                "–£ —Ç–µ–±—è –Ω–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è! üòø",
                reply_markup=MAIN_KEYBOARD
            )
            context.user_data["state"] = None
            return

        keyboard = [
            [InlineKeyboardButton(category.category_name, callback_data=f"delete_category:{category.category_id}")]
            for category in categories
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.message.reply_text(
            "–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è (—Ç–µ–º—ã –ø–µ—Ä–µ–π–¥—É—Ç –≤ '–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏'):", reply_markup=reply_markup
        )
        context.user_data["state"] = "awaiting_category_deletion"

    elif action == "move":
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = db.get_user(user_id)
        if not user:
            await query.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        topics = db.get_active_topics(user_id, user.timezone, category_id='all')  # –¢–µ–ø–µ—Ä—å user –¥–æ—Å—Ç—É–ø–µ–Ω
        if not topics:
            await query.message.reply_text(
                "–£ —Ç–µ–±—è –Ω–µ—Ç —Ç–µ–º –¥–ª—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è! üòø",
                reply_markup=MAIN_KEYBOARD
            )
            context.user_data["state"] = None
            return

        keyboard = [
            [InlineKeyboardButton(topic.topic_name, callback_data=f"move_topic:{topic.topic_id}")]
            for topic in topics
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.message.reply_text(
            "–í—ã–±–µ—Ä–∏ —Ç–µ–º—É –¥–ª—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è:", reply_markup=reply_markup
        )
        context.user_data["state"] = "awaiting_topic_selection_move"


async def handle_rename_category(query, context, parts, user_id):
    category_id = int(parts[1]) if len(parts) > 1 else None
    context.user_data["rename_category_id"] = category_id
    context.user_data["state"] = "awaiting_new_category_name"
    await query.message.reply_text(
        "–ù–∞–ø–∏—à–∏ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏! üòä",
        reply_markup=ReplyKeyboardMarkup([["–û—Ç–º–µ–Ω–∞"]], resize_keyboard=True)
    )


async def handle_delete_category(query, context, parts, user_id):
    category_id = int(parts[1]) if len(parts) > 1 else None

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    category = db.get_category(category_id, user_id)
    category_name = category.category_name if category else "Unknown"

    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ø—ã—Ç–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    logger.info(
        f"USER_ACTION: User {user_id} attempting to delete category '{category_name}' (category_id: {category_id})")

    if db.delete_category(category_id, user_id):
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        logger.info(f"CATEGORY_DELETED: User {user_id} successfully deleted category '{category_name}'")
        logger.info(f"CATEGORY_CLEANUP: All topics from category '{category_name}' moved to 'No category'")

        await query.message.reply_text(
            "–ö–∞—Ç–µ–≥–æ—Ä–∏—è —É–¥–∞–ª–µ–Ω–∞! –¢–µ–º—ã –ø–µ—Ä–µ–º–µ—â–µ–Ω—ã –≤ '–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏'. üò∫",
            reply_markup=MAIN_KEYBOARD
        )
        logger.debug(f"User {user_id} deleted category {category_id}")
    else:
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ—É–¥–∞—á–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏
        logger.warning(f"CATEGORY_DELETE_FAILED: Category {category_id} not found for user {user_id}")
        await query.message.reply_text(
            "–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. üòø",
            reply_markup=MAIN_KEYBOARD
        )
    context.user_data["state"] = None


async def handle_move_topic(query, context, parts, user_id):
    topic_id = int(parts[1]) if len(parts) > 1 else None
    context.user_data["move_topic_id"] = topic_id
    categories = db.get_categories(user_id)
    keyboard = [
        [InlineKeyboardButton(category.category_name, callback_data=f"move_to_category:{category.category_id}")]
        for category in categories
    ]
    keyboard.append([InlineKeyboardButton("–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏", callback_data="move_to_category:none")])
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.message.reply_text(
        "–í—ã–±–µ—Ä–∏ –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —Ç–µ–º—ã:", reply_markup=reply_markup
    )
    context.user_data["state"] = "awaiting_category_selection"


async def handle_move_to_category(query, context, parts, user_id):
    category_id_str = parts[1] if len(parts) > 1 else None
    category_id = int(category_id_str) if category_id_str and category_id_str != "none" else None
    topic_id = context.user_data.get("move_topic_id")

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    user = db.get_user(user_id)
    topic = db.get_topic(topic_id, user_id, user.timezone if user else "UTC")
    topic_name = topic.topic_name if topic else "Unknown"

    old_category_name = db.get_category(topic.category_id,
                                        user_id).category_name if topic and topic.category_id else "–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"
    new_category_name = db.get_category(category_id, user_id).category_name if category_id else "–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"

    if db.move_topic_to_category(topic_id, user_id, category_id):
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è —Ç–µ–º—ã
        logger.info(
            f"TOPIC_MOVED: User {user_id} moved topic '{topic_name}' from '{old_category_name}' to '{new_category_name}'")

        await query.message.reply_text(
            f"–¢–µ–º–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∞ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—é '{new_category_name}'! üò∫",
            reply_markup=MAIN_KEYBOARD
        )
        logger.debug(f"User {user_id} moved topic {topic_id} to category {category_id}")
    else:
        logger.warning(f"TOPIC_MOVE_FAILED: Failed to move topic {topic_id} for user {user_id}")
        await query.message.reply_text(
            "–¢–µ–º–∞ –∏–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. üòø",
            reply_markup=MAIN_KEYBOARD
        )
    context.user_data["state"] = None
    context.user_data.pop("move_topic_id", None)


async def handle_add_to_new_category(query, context, parts, user_id, user):  # –î–æ–±–∞–≤–∏–ª user
    if len(parts) > 1 and parts[-1] == "no":
        await query.message.reply_text(
            "–ö–∞—Ç–µ–≥–æ—Ä–∏—è —Å–æ–∑–¥–∞–Ω–∞ –±–µ–∑ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–µ–º! üò∫",
            reply_markup=MAIN_KEYBOARD
        )
        context.user_data.pop("new_category_id", None)
        context.user_data["state"] = None
    elif len(parts) > 2 and parts[-1] == "yes":
        category_id = int(parts[1])
        topics = db.get_active_topics(user_id, user.timezone, category_id='all')
        if not topics:
            await query.message.reply_text(
                "–£ —Ç–µ–±—è –Ω–µ—Ç —Ç–µ–º –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è! üòø",
                reply_markup=MAIN_KEYBOARD
            )
            context.user_data["state"] = None
            return

        keyboard = [
            [InlineKeyboardButton(topic.topic_name, callback_data=f"add_to_category_topic:{topic.topic_id}")]
            for topic in topics
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.message.reply_text(
            "–í—ã–±–µ—Ä–∏ —Ç–µ–º—É –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=reply_markup
        )
        context.user_data["move_to_category_id"] = category_id
        context.user_data["state"] = "awaiting_topic_add_to_category"


async def handle_add_to_category_topic(query, context, parts, user_id):
    topic_id = int(parts[1]) if len(parts) > 1 else None
    category_id = context.user_data.get("move_to_category_id")

    if db.move_topic_to_category(topic_id, user_id, category_id):
        category_name = db.get_category(category_id, user_id).category_name
        await query.message.reply_text(
            f"–¢–µ–º–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—é '{category_name}'! üò∫",
            reply_markup=MAIN_KEYBOARD
        )
        logger.debug(f"User {user_id} added topic {topic_id} to category {category_id}")
    else:
        await query.message.reply_text(
            "–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–µ–º—ã. üòø",
            reply_markup=MAIN_KEYBOARD
        )
    context.user_data["state"] = None
    context.user_data.pop("move_to_category_id", None)


async def show_delete_categories(update: Update, context: ContextTypes.DEFAULT_TYPE, user_id):
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–Ω—É—Ç—Ä–∏ —Ñ—É–Ω–∫—Ü–∏–∏
    user = db.get_user(user_id)
    if not user:
        await update.message.reply_text("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return

    categories = db.get_categories(user_id)
    keyboard = []

    for category in categories:
        topics_in_category = db.get_active_topics(user_id, user.timezone, category.category_id)  # –¢–µ–ø–µ—Ä—å user –¥–æ—Å—Ç—É–ø–µ–Ω
        if topics_in_category:
            keyboard.append([
                InlineKeyboardButton(
                    f"{category.category_name} ({len(topics_in_category)})",
                    callback_data=f"delete_category_select:{category.category_id}"
                )
            ])

    topics_no_category = db.get_active_topics(user_id, user.timezone, category_id=None)  # –¢–µ–ø–µ—Ä—å user –¥–æ—Å—Ç—É–ø–µ–Ω
    if topics_no_category:
        keyboard.append([
            InlineKeyboardButton(
                f"üìÅ –ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ({len(topics_no_category)})",
                callback_data="delete_category_select:none"
            )
        ])

    keyboard.append([
        InlineKeyboardButton("üîç –í—Å–µ —Ç–µ–º—ã —Å—Ä–∞–∑—É", callback_data="delete_all_topics")
    ])

    reply_markup = InlineKeyboardMarkup(keyboard)

    if update.callback_query:
        await update.callback_query.edit_message_text(
            "–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ç–µ–º:",
            reply_markup=reply_markup
        )
    else:
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ç–µ–º:",
            reply_markup=reply_markup
        )
    context.user_data["state"] = "awaiting_delete_category"


async def show_restore_categories(update: Update, context: ContextTypes.DEFAULT_TYPE, user_id):
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–Ω—É—Ç—Ä–∏ —Ñ—É–Ω–∫—Ü–∏–∏ (—Ö–æ—Ç—è –¥–ª—è completed_topics timezone –º–æ–∂–µ—Ç –∏ –Ω–µ –Ω—É–∂–µ–Ω)
    user = db.get_user(user_id)
    if not user:
        await update.message.reply_text("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return

    completed_topics = db.get_completed_topics(user_id)

    categories_dict = {}
    no_category_topics = []

    for topic in completed_topics:
        if topic.category_id:
            if topic.category_id not in categories_dict:
                category = db.get_category(topic.category_id, user_id)
                if category:
                    categories_dict[topic.category_id] = {
                        'name': category.category_name,
                        'topics': []
                    }
            categories_dict[topic.category_id]['topics'].append(topic)
        else:
            no_category_topics.append(topic)

    keyboard = []

    for category_id, category_data in categories_dict.items():
        if category_data['topics']:
            keyboard.append([
                InlineKeyboardButton(
                    f"{category_data['name']} ({len(category_data['topics'])})",
                    callback_data=f"restore_category_select:{category_id}"
                )
            ])

    if no_category_topics:
        keyboard.append([
            InlineKeyboardButton(
                f"üìÅ –ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ({len(no_category_topics)})",
                callback_data="restore_category_select:none"
            )
        ])

    keyboard.append([
        InlineKeyboardButton("üîç –í—Å–µ —Ç–µ–º—ã —Å—Ä–∞–∑—É", callback_data="restore_all_topics")
    ])

    reply_markup = InlineKeyboardMarkup(keyboard)

    if update.callback_query:
        await update.callback_query.edit_message_text(
            "–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–µ–º:",
            reply_markup=reply_markup
        )
    else:
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–µ–º:",
            reply_markup=reply_markup
        )
    context.user_data["state"] = "awaiting_restore_category"


async def handle_callback_query(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    data = query.data
    user_id = update.effective_user.id
    user = db.get_user(user_id)

    if not user:
        await query.answer()
        return

    # –†–∞–∑–±–∏–≤–∞–µ–º data –Ω–∞ —á–∞—Å—Ç–∏ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
    parts = data.split(':')
    action = parts[0]

    try:
        if action == "tz":
            await handle_timezone_callback(query, context, parts, user_id)

        elif action == "category_progress":
            category_id_str = parts[1] if len(parts) > 1 else None
            category_id = int(category_id_str) if category_id_str and category_id_str != "none" else None
            await show_category_progress(update, context, category_id, user.timezone)

        elif action == "add_topic_category":
            await handle_add_topic_category(query, context, parts, user_id, user)

        elif action == "delete_category_select":
            category_id_str = parts[1] if len(parts) > 1 else None
            category_id = int(category_id_str) if category_id_str and category_id_str != "none" else None

            topics = db.get_active_topics(user_id, user.timezone, category_id=category_id)
            if not topics:
                await query.answer("–í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ—Ç —Ç–µ–º –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è! üòø")
                return

            keyboard = []
            for topic in topics:
                category_name = db.get_category(topic.category_id,
                                                user_id).category_name if topic.category_id else "üìÅ –ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"
                keyboard.append([
                    InlineKeyboardButton(
                        f"{topic.topic_name} ({category_name})",
                        callback_data=f"delete:{topic.topic_id}"
                    )
                ])

            keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data="back_to_delete_categories")])
            reply_markup = InlineKeyboardMarkup(keyboard)

            category_name = db.get_category(category_id, user_id).category_name if category_id else "üìÅ –ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"
            await query.message.edit_text(
                f"–í—ã–±–µ—Ä–∏ —Ç–µ–º—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category_name}':",
                reply_markup=reply_markup
            )
            context.user_data["state"] = "awaiting_topic_deletion"

        elif action == "delete":
            await handle_delete_topic(query, context, parts, user_id)

        elif action == "restore_category_select":
            category_id_str = parts[1] if len(parts) > 1 else None
            category_id = int(category_id_str) if category_id_str and category_id_str != "none" else None

            completed_topics = db.get_completed_topics(user_id)
            if category_id is not None:
                filtered_topics = [t for t in completed_topics if t.category_id == category_id]
            else:
                filtered_topics = [t for t in completed_topics if t.category_id is None]

            if not filtered_topics:
                await query.answer("–í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ—Ç –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö —Ç–µ–º! üòø")
                return

            keyboard = []
            for topic in filtered_topics:
                category_name = db.get_category(topic.category_id,
                                                user_id).category_name if topic.category_id else "üìÅ –ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"
                keyboard.append([
                    InlineKeyboardButton(
                        f"{topic.topic_name} ({category_name})",
                        callback_data=f"restore:{topic.completed_topic_id}"
                    )
                ])

            keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data="back_to_restore_categories")])
            reply_markup = InlineKeyboardMarkup(keyboard)

            category_name = db.get_category(category_id, user_id).category_name if category_id else "üìÅ –ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"
            await query.message.edit_text(
                f"–í—ã–±–µ—Ä–∏ —Ç–µ–º—É –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category_name}':",
                reply_markup=reply_markup
            )
            context.user_data["state"] = "awaiting_topic_restoration"

        elif action == "restore":
            await handle_restore_topic(query, context, parts, user_id, user)

        elif action == "category_action":
            await handle_category_action(query, context, parts, user_id)

        elif action == "rename_category":
            await handle_rename_category(query, context, parts, user_id)

        elif action == "delete_category":
            await handle_delete_category(query, context, parts, user_id)

        elif action == "move_topic":
            await handle_move_topic(query, context, parts, user_id)

        elif action == "move_to_category":
            await handle_move_to_category(query, context, parts, user_id)

        elif action == "add_to_new_category":
            await handle_add_to_new_category(query, context, parts, user_id, user)

        elif action == "add_to_category_topic":
            await handle_add_to_category_topic(query, context, parts, user_id)

        elif action == "repeated":
            await handle_repeated_callback(query, context, parts, user_id, user)

        elif data == "back_to_progress":
            await show_progress(update, context)

        elif data == "back_to_delete_categories":
            await show_delete_categories(update, context, user_id)

        elif data == "back_to_restore_categories":
            await show_restore_categories(update, context, user_id)

        elif data == "delete_all_topics":
            topics = db.get_active_topics(user_id, user.timezone, category_id='all')
            if not topics:
                await query.answer("–£ —Ç–µ–±—è –Ω–µ—Ç —Ç–µ–º –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è! üòø")
                return

            limited_topics = topics[:20]
            keyboard = []
            for topic in limited_topics:
                category_name = db.get_category(topic.category_id,
                                                user_id).category_name if topic.category_id else "üìÅ –ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"
                keyboard.append([
                    InlineKeyboardButton(
                        f"{topic.topic_name} ({category_name})",
                        callback_data=f"delete:{topic.topic_id}"
                    )
                ])

            if len(topics) > 20:
                keyboard.append(
                    [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data="back_to_delete_categories")])
                await query.message.edit_text(
                    f"–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Ç–µ–º –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è ({len(topics)}). –ü–æ–∫–∞–∑–∞–Ω—ã –ø–µ—Ä–≤—ã–µ 20. –õ—É—á—à–µ –∏—Å–ø–æ–ª—å–∑—É–π –≤—ã–±–æ—Ä –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º.",
                    reply_markup=InlineKeyboardMarkup(keyboard)
                )
            else:
                keyboard.append(
                    [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data="back_to_delete_categories")])
                await query.message.edit_text(
                    "–í—ã–±–µ—Ä–∏ —Ç–µ–º—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è (–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±—É–¥–µ—Ç –Ω–µ–ª—å–∑—è):",
                    reply_markup=InlineKeyboardMarkup(keyboard)
                )
            context.user_data["state"] = "awaiting_topic_deletion"

        elif data == "restore_all_topics":
            completed_topics = db.get_completed_topics(user_id)
            if not completed_topics:
                await query.answer("–£ —Ç–µ–±—è –Ω–µ—Ç –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö —Ç–µ–º –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è! üòø")
                return

            limited_topics = completed_topics[:20]
            keyboard = []
            for topic in limited_topics:
                category_name = db.get_category(topic.category_id,
                                                user_id).category_name if topic.category_id else "üìÅ –ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"
                keyboard.append([
                    InlineKeyboardButton(
                        f"{topic.topic_name} ({category_name})",
                        callback_data=f"restore:{topic.completed_topic_id}"
                    )
                ])

            if len(completed_topics) > 20:
                keyboard.append(
                    [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data="back_to_restore_categories")])
                await query.message.edit_text(
                    f"–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Ç–µ–º –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è ({len(completed_topics)}). –ü–æ–∫–∞–∑–∞–Ω—ã –ø–µ—Ä–≤—ã–µ 20. –õ—É—á—à–µ –∏—Å–ø–æ–ª—å–∑—É–π –≤—ã–±–æ—Ä –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º.",
                    reply_markup=InlineKeyboardMarkup(keyboard)
                )
            else:
                keyboard.append(
                    [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data="back_to_restore_categories")])
                await query.message.edit_text(
                    "–í—ã–±–µ—Ä–∏ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—É—é —Ç–µ–º—É –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è:",
                    reply_markup=InlineKeyboardMarkup(keyboard)
                )
            context.user_data["state"] = "awaiting_topic_restoration"

        else:
            logger.warning(f"Unknown callback data: {data} from user {user_id}")
            await query.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")

    except Exception as e:
        logger.error(f"Error handling callback {data} for user {user_id}: {str(e)}")
        await query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        await query.message.reply_text(
            "–û–π, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫! üòø –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π /reset.",
            reply_markup=MAIN_KEYBOARD
        )

    await query.answer()


async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    text = update.message.text.strip()
    user = db.get_user(user_id)

    # –î–û–ë–ê–í–¨ –û–¢–õ–ê–î–û–ß–ù–û–ï –õ–û–ì–ò–†–û–í–ê–ù–ò–ï
    logger.debug(
        f"User {user_id} sent: '{text}', state: {context.user_data.get('state')}, user exists: {user is not None}")

    # –í–ê–ñ–ù–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –ø—ã—Ç–∞–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é,
    # –Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞—Å—Ç—Ä—è–ª–æ - –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
    if user and text in ["–ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å", "–î–æ–±–∞–≤–∏—Ç—å —Ç–µ–º—É", "–£–¥–∞–ª–∏—Ç—å —Ç–µ–º—É", "–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–µ–º—É", "–ö–∞—Ç–µ–≥–æ—Ä–∏–∏"]:
        if context.user_data.get("state") in ["awaiting_timezone", "awaiting_manual_timezone"]:
            logger.warning(f"Force resetting stuck timezone state for user {user_id}")
            context.user_data["state"] = None
            context.user_data.clear()

    if not user and not text.startswith("/tz"):
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å —Å –ø–æ–º–æ—â—å—é /tz.",
            reply_markup=ReplyKeyboardMarkup([["/tz"]], resize_keyboard=True)
        )
        return

    state = context.user_data.get("state")

    if state == "awaiting_timezone" or state == "awaiting_manual_timezone":
        logger.debug(f"Processing timezone input: '{text}' for user {user_id}")

        # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø–∞—Ä—Å–∏–Ω–≥–∞
        timezone_candidate = None
        display_name = None

        # –í–∞—Ä–∏–∞–Ω—Ç 1: –ü—Ä–æ–±—É–µ–º –∫–∞–∫ UTC —Å–º–µ—â–µ–Ω–∏–µ
        timezone_candidate, display_name = parse_utc_offset(text)
        logger.debug(f"UTC offset parse result: {timezone_candidate}, display: {display_name}")

        # –í–∞—Ä–∏–∞–Ω—Ç 2: –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å, –ø—Ä–æ–±—É–µ–º –∫–∞–∫ –µ—Å—Ç—å
        if not timezone_candidate:
            timezone_candidate = text
            display_name = text
            logger.debug(f"Trying as direct timezone: {timezone_candidate}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞
        try:
            pytz.timezone(timezone_candidate)

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å
            db.save_user(user_id, update.effective_user.username or "", timezone_candidate)
            schedule_daily_check(user_id, timezone_candidate)

            # –í–ê–ñ–ù–û: –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            context.user_data["state"] = None
            context.user_data.clear()

            await update.message.reply_text(
                f"‚úÖ –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å {display_name} —Å–æ—Ö—Ä–∞–Ω–µ–Ω! üò∫\n\n"
                f"–¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–ª—è—Ç—å —Ç–µ–º—ã!",
                reply_markup=MAIN_KEYBOARD
            )

            logger.info(f"User {user_id} successfully set timezone to: {timezone_candidate} (display: {display_name})")

        except pytz.UnknownTimeZoneError:
            logger.warning(f"User {user_id} entered unknown timezone: {text}")
            await update.message.reply_text(
                f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å: {text}\n\n"
                "–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:\n"
                "‚Ä¢ `Europe/Moscow`, `Asia/Tokyo`\n"
                "‚Ä¢ `+3`, `UTC+3`, `-5`, `UTC-5`\n"
                "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π /tz –¥–ª—è –≤—ã–±–æ—Ä–∞ –∏–∑ —Å–ø–∏—Å–∫–∞",
                reply_markup=MAIN_KEYBOARD
            )
            # –ù–µ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–¥–µ—Å—å - –¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞

        except Exception as e:
            logger.error(f"Error setting timezone for user {user_id}: {str(e)}")
            await update.message.reply_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞!",
                reply_markup=MAIN_KEYBOARD
            )
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ –¥—Ä—É–≥–∏—Ö –æ—à–∏–±–∫–∞—Ö
            context.user_data["state"] = None

        return

    if state == "awaiting_category_name":
        if text == "–û—Ç–º–µ–Ω–∞":
            context.user_data["state"] = None
            await update.message.reply_text(
                "–°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ! üò∫",
                reply_markup=MAIN_KEYBOARD
            )
            return

        # –õ–∏–º–∏—Ç —É–∂–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏ "–°–æ–∑–¥–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é", —Ç–∞–∫ —á—Ç–æ –∑–¥–µ—Å—å –ø—Ä–æ—Å—Ç–æ —Å–æ–∑–¥–∞–µ–º
        try:
            category_id = db.add_category(user_id, text)
            keyboard = [
                [InlineKeyboardButton("–î–∞", callback_data=f"add_to_new_category:{category_id}:yes")],
                [InlineKeyboardButton("–ù–µ—Ç", callback_data="add_to_new_category:no")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)

            # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            categories = db.get_categories(user_id)
            logger.info(f"USER_ACTION: User {user_id} created category '{text}' ({len(categories)}/{MAX_CATEGORIES})")

            await update.message.reply_text(
                f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è '{text}' —Å–æ–∑–¥–∞–Ω–∞! üò∫ –î–æ–±–∞–≤–∏—Ç—å –≤ –Ω–µ—ë —Ç–µ–º—ã?",
                reply_markup=reply_markup
            )
            context.user_data["new_category_id"] = category_id
            context.user_data["state"] = "awaiting_add_to_category"
        except Exception as e:
            logger.error(f"Error creating category '{text}' for user {user_id}: {e}")
            await update.message.reply_text(
                "–û–π, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏. üòî –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞!",
                reply_markup=MAIN_KEYBOARD
            )
        return

    if state == "awaiting_new_category_name":
        if text == "–û—Ç–º–µ–Ω–∞":
            context.user_data["state"] = None
            await update.message.reply_text(
                "–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ! üò∫",
                reply_markup=MAIN_KEYBOARD
            )
            return
        category_id = context.user_data.get("rename_category_id")
        try:
            category = db.get_category(category_id, user_id)
            if category and db.rename_category(category_id, user_id, text):
                await update.message.reply_text(
                    f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è '{category.category_name}' –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∞ –≤ '{text}'! üò∫",
                    reply_markup=MAIN_KEYBOARD
                )
                context.user_data["state"] = None
                context.user_data.pop("rename_category_id", None)
            else:
                await update.message.reply_text(
                    "–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. üòø –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞!", reply_markup=MAIN_KEYBOARD
                )
        except Exception as e:
            logger.error(f"Error renaming category {category_id} for user {user_id}: {e}")
            await update.message.reply_text(
                "–û–π, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø—Ä–∏ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏. üòî –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞!",
                reply_markup=MAIN_KEYBOARD
            )
        context.user_data["state"] = None
        return

    if state in ["awaiting_category_action", "awaiting_topic_selection_move", "awaiting_category_selection",
                 "awaiting_add_to_category", "awaiting_topic_add_to_category"]:
        context.user_data["state"] = None
        context.user_data.clear()
        await update.message.reply_text(
            "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ! üò∫",
            reply_markup=MAIN_KEYBOARD
        )
        logger.debug(f"User {user_id} exited state {state} due to new command")
        return

    if text.startswith("–ü–æ–≤—Ç–æ—Ä–∏–ª "):
        topic_name = text[len("–ü–æ–≤—Ç–æ—Ä–∏–ª "):].strip()
        logger.info(f"USER_ACTION: User {user_id} attempting to mark topic '{topic_name}' as repeated via text command")
        try:
            result = db.mark_topic_repeated(user_id, topic_name, user.timezone)
            if not result:
                logger.warning(f"TOPIC_NOT_FOUND: User {user_id} tried to mark unknown topic '{topic_name}' as repeated")
                await update.message.reply_text(
                    f"–¢–µ–º–∞ '{topic_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. üòø –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞!",
                    reply_markup=MAIN_KEYBOARD
                )
                return
            topic_id, completed_repetitions, next_reminder_time, reminder_id = result
            topic = db.get_topic(topic_id, user_id, user.timezone)
            total_repetitions = 7

            logger.info(f"TOPIC_REPEATED: User {user_id} marked topic '{topic_name}' as repeated via text command")
            logger.info(
                f"TOPIC_PROGRESS: Topic '{topic_name}' - {completed_repetitions}/{total_repetitions} repetitions completed")

            progress_percentage = (completed_repetitions / total_repetitions) * 100
            progress_bar = "‚ñà" * int(completed_repetitions) + "‚ñë" * (total_repetitions - completed_repetitions)
            tz = pytz.timezone(user.timezone)
            if completed_repetitions < total_repetitions:
                next_reminder_str = db._from_utc_naive(next_reminder_time, user.timezone).strftime("%d.%m.%Y %H:%M")
                if reminder_id:
                    scheduler.add_job(
                        send_reminder,
                        "date",
                        run_date=db._from_utc_naive(next_reminder_time, user.timezone),
                        args=[app.bot, user_id, topic_name, reminder_id],
                        id=f"reminder_{reminder_id}_{user_id}",
                        timezone=tz,
                        misfire_grace_time=None
                    )
                    logger.info(
                        f"REMINDER_SCHEDULED: Next reminder for '{topic_name}' scheduled for {next_reminder_str} (reminder_id: {reminder_id})")
                await update.message.reply_text(
                    f"–¢–µ–º–∞ '{topic_name}' –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –ø–æ–≤—Ç–æ—Ä—ë–Ω–Ω–∞—è! üò∫\n"
                    f"–ó–∞–≤–µ—Ä—à–µ–Ω–æ: {completed_repetitions}/{total_repetitions} –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π\n"
                    f"–°–ª–µ–¥—É—é—â–µ–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ: {next_reminder_str}\n"
                    f"–ü—Ä–æ–≥—Ä–µ—Å—Å: {progress_bar} {progress_percentage:.1f}%",
                    reply_markup=MAIN_KEYBOARD
                )
            else:
                logger.info(f"TOPIC_COMPLETED: User {user_id} completed topic '{topic_name}' via text command!")
                await update.message.reply_text(
                    f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è—é, —Ç—ã –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—Å–≤–æ–∏–ª —Ç–µ–º—É '{topic_name}'! üèÜ\n"
                    f"–ó–∞–≤–µ—Ä—à–µ–Ω–æ: {completed_repetitions}/{total_repetitions} –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π\n"
                    f"–ü—Ä–æ–≥—Ä–µ—Å—Å: {progress_bar} {progress_percentage:.1f}%\n"
                    f"–ï—Å–ª–∏ –∑–∞—Ö–æ—á–µ—à—å –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –µ—ë –∑–∞–Ω–æ–≤–æ, –∏—Å–ø–æ–ª—å–∑—É–π '–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–µ–º—É'. üò∫",
                    reply_markup=MAIN_KEYBOARD
                )
        except Exception as e:
            logger.error(f"ERROR: Failed to mark topic '{topic_name}' as repeated for user {user_id}: {str(e)}")
            await update.message.reply_text(
                "–û–π, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø—Ä–∏ –æ—Ç–º–µ—Ç–∫–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è. üòî –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞!",
                reply_markup=MAIN_KEYBOARD
            )
        return

    if text == "–ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å":
        await show_progress(update, context)
        return

    if text == "–î–æ–±–∞–≤–∏—Ç—å —Ç–µ–º—É":
        # –ü–†–û–í–ï–†–ö–ê –õ–ò–ú–ò–¢–ê –°–†–ê–ó–£ –ü–†–ò –ù–ê–ñ–ê–¢–ò–ò –ö–ù–û–ü–ö–ò
        active_topics = db.get_active_topics(user_id, user.timezone, category_id='all')
        if len(active_topics) >= MAX_ACTIVE_TOPICS:
            await update.message.reply_text(
                f"‚ùå –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–µ–º ({MAX_ACTIVE_TOPICS})! üòø\n\n"
                f"–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é —Ç–µ–º—É, —Å–Ω–∞—á–∞–ª–∞ –∑–∞–≤–µ—Ä—à–∏ –∏–ª–∏ —É–¥–∞–ª–∏ –æ–¥–Ω—É –∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö.\n"
                f"–°–µ–π—á–∞—Å —É —Ç–µ–±—è {len(active_topics)} –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–µ–º.\n\n"
                f"üí° *–°–æ–≤–µ—Ç:* –õ—É—á—à–µ —Å–æ—Å—Ä–µ–¥–æ—Ç–æ—á—å—Å—è –Ω–∞ –∫–∞—á–µ—Å—Ç–≤–µ, –∞ –Ω–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ!",
                reply_markup=MAIN_KEYBOARD,
                parse_mode="Markdown"
            )
            logger.info(
                f"LIMIT_REACHED: User {user_id} reached topic limit ({len(active_topics)}/{MAX_ACTIVE_TOPICS}) when trying to add topic")
            return

        # –ï—Å–ª–∏ –ª–∏–º–∏—Ç –Ω–µ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥—É –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–µ–º—ã
        context.user_data["state"] = "awaiting_topic_name"
        await update.message.reply_text(
            "–ù–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–º—ã, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—á–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å! üòä",
            reply_markup=ReplyKeyboardMarkup([["–û—Ç–º–µ–Ω–∞"]], resize_keyboard=True)
        )

        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ–º—ã
        logger.info(f"USER_ACTION: User {user_id} starting to add new topic ({len(active_topics)}/{MAX_ACTIVE_TOPICS})")
        return

    if text == "–£–¥–∞–ª–∏—Ç—å —Ç–µ–º—É":
        await show_delete_categories(update, context, user_id)
        return

    if text == "–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–µ–º—É":
        await show_restore_categories(update, context, user_id)
        return

    if text == "–ö–∞—Ç–µ–≥–æ—Ä–∏–∏":
        # –ü–†–û–í–ï–†–ö–ê –õ–ò–ú–ò–¢–ê –ü–†–ò –°–û–ó–î–ê–ù–ò–ò –ö–ê–¢–ï–ì–û–†–ò–ò (–µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±–µ—Ä–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ)
        categories = db.get_categories(user_id)

        keyboard = [
            [
                InlineKeyboardButton("–°–æ–∑–¥–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é", callback_data="category_action:create"),
                InlineKeyboardButton("–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é", callback_data="category_action:rename"),
            ],
            [
                InlineKeyboardButton("–ü–µ—Ä–µ–Ω–µ—Å—Ç–∏ —Ç–µ–º—É", callback_data="category_action:move"),
                InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é", callback_data="category_action:delete"),
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª–∏–º–∏—Ç–µ –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ
        limit_info = f"\n\nüìÅ –ö–∞—Ç–µ–≥–æ—Ä–∏–π: {len(categories)}/{MAX_CATEGORIES}"

        await update.message.reply_text(
            f"–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏:{limit_info}",
            reply_markup=reply_markup
        )
        context.user_data["state"] = "awaiting_category_action"
        return

    if text == "–û—Ç–º–µ–Ω–∞":
        context.user_data["state"] = None
        context.user_data.clear()
        await update.message.reply_text(
            "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ! üò∫",
            reply_markup=MAIN_KEYBOARD
        )
        return

    if state == "awaiting_topic_name":
        if text == "–û—Ç–º–µ–Ω–∞":
            context.user_data["state"] = None
            context.user_data.clear()
            await update.message.reply_text(
                "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ! üò∫",
                reply_markup=MAIN_KEYBOARD
            )
            return

        context.user_data["new_topic_name"] = text
        categories = db.get_categories(user_id)
        keyboard = [
            [InlineKeyboardButton(category.category_name, callback_data=f"add_topic_category:{category.category_id}")]
            for category in categories
        ]
        keyboard.append([InlineKeyboardButton("–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏", callback_data="add_topic_category:none")])
        reply_markup = InlineKeyboardMarkup(keyboard)

        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ–º—ã
        logger.info(f"USER_ACTION: User {user_id} creating topic '{text}'")

        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —Ç–µ–º—ã:", reply_markup=reply_markup
        )
        context.user_data["state"] = "awaiting_topic_category"
        return

    await update.message.reply_text(
        "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. üòø",
        reply_markup=MAIN_KEYBOARD
    )


async def send_reminder(bot, user_id: int, topic_name: str, reminder_id: int):
    try:
        keyboard = [[InlineKeyboardButton("–ü–æ–≤—Ç–æ—Ä–∏–ª!", callback_data=f"repeated:{reminder_id}")]]
        reply_markup = InlineKeyboardMarkup(keyboard)

        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
        logger.info(f"REMINDER_SENT: Sending reminder {reminder_id} for topic '{topic_name}' to user {user_id}")

        await bot.send_message(
            chat_id=user_id,
            text=f"‚è∞ –ü–æ—Ä–∞ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å —Ç–µ–º—É '{topic_name}'! üò∫",
            reply_markup=reply_markup
        )
    except Exception as e:
        logger.error(f"REMINDER_ERROR: Failed to send reminder {reminder_id} to user {user_id}: {str(e)}")


async def check_overdue_for_user(app: Application, user_id: int):
    user = db.get_user(user_id)
    if not user:
        return
    tz = pytz.timezone(user.timezone)
    now_utc = datetime.utcnow()
    now_local = pytz.utc.localize(now_utc).astimezone(tz)
    topics = db.get_active_topics(user_id, user.timezone, 'all')
    for topic in topics:
        if topic.next_review is None or topic.is_completed:
            continue
        next_review_utc = topic.next_review  # utc naive
        next_review_local = db._from_utc_naive(next_review_utc, user.timezone)
        if next_review_local < now_local:
            # Create temporary reminder for button
            reminder_id = db.add_reminder(user_id, topic.topic_id, now_utc)
            keyboard = [[InlineKeyboardButton("–ü–æ–≤—Ç–æ—Ä–∏–ª!", callback_data=f"repeated:{reminder_id}")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await app.bot.send_message(
                chat_id=user_id,
                text=f"‚è∞ –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ! –ü–æ—Ä–∞ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å —Ç–µ–º—É '{topic.topic_name}'! üò∫",
                reply_markup=reply_markup
            )
            logger.debug(f"Sent overdue reminder for topic '{topic.topic_name}' to user {user_id}")


def schedule_daily_check(user_id: int, timezone: str):
    job_id = f"daily_check_{user_id}"
    if scheduler.get_job(job_id):
        scheduler.remove_job(job_id)
    scheduler.add_job(
        check_overdue_for_user,
        'cron',
        hour=9,
        minute=0,
        timezone=timezone,
        args=[app, user_id],  # app will be defined in main
        id=job_id
    )
    logger.debug(f"Scheduled daily check for user {user_id} at 9:00 {timezone}")


async def init_scheduler(app: Application):
    users = db.get_all_users()
    logger.info(f"Initializing scheduler for {len(users)} users")

    for i, user in enumerate(users, 1):
        logger.info(f"Processing user {i}/{len(users)}: {user.user_id}")

        reminders = db.get_reminders(user.user_id)
        logger.info(f"User {user.user_id} has {len(reminders)} reminders in database")

        tz = pytz.timezone(user.timezone)
        scheduled_count = 0
        skipped_count = 0

        for reminder in reminders:
            topic = db.get_topic_by_reminder_id(reminder.reminder_id, user.user_id, user.timezone)
            if topic:
                run_date = db._from_utc_naive(reminder.scheduled_time, user.timezone)
                if run_date > datetime.now(tz):
                    scheduler.add_job(
                        send_reminder,
                        "date",
                        run_date=run_date,
                        args=[app.bot, user.user_id, topic.topic_name, reminder.reminder_id],
                        id=f"reminder_{reminder.reminder_id}_{user.user_id}",
                        timezone=tz,
                        misfire_grace_time=None
                    )
                    scheduled_count += 1
                    logger.debug(f"Scheduled reminder {reminder.reminder_id} for topic '{topic.topic_name}'")
                else:
                    skipped_count += 1
                    logger.info(f"REMINDER_SKIPPED: Reminder {reminder.reminder_id} for topic '{topic.topic_name}' is in the past (was: {run_date})")
            else:
                logger.warning(f"ORPHANED_REMINDER: Reminder {reminder.reminder_id} has no associated topic")

        schedule_daily_check(user.user_id, user.timezone)
        await check_overdue_for_user(app, user.user_id)

        logger.info(f"SCHEDULER_STATS: User {user.user_id} - {scheduled_count} reminders scheduled, {skipped_count} skipped (past due)")

    total_jobs = len(scheduler.get_jobs())
    logger.info(f"Scheduler initialization complete. Total jobs: {total_jobs}")


async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.error(f"Update {update} caused error {context.error}")
    text = "–û–π, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫! üòø –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π /reset."
    if update and update.effective_message:
        await update.effective_message.reply_text(
            text,
            reply_markup=MAIN_KEYBOARD
        )


async def main():
    global app

    # –ü—Ä–µ–∂–¥–µ –≤—Å–µ–≥–æ –æ—Ç–∫–ª—é—á–∞–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–≥–æ–≤
    logging.getLogger('sqlalchemy.engine').propagate = False

    logger.info("Starting bot initialization...")

    try:
        app = Application.builder().token(BOT_TOKEN).build()
        logger.info("Bot application created successfully")
    except InvalidToken:
        logger.error("Invalid bot token provided")
        raise
    except Exception as e:
        logger.error(f"Failed to create bot application: {e}")
        raise

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("tz", handle_timezone))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(CommandHandler("reset", reset))
    app.add_handler(CallbackQueryHandler(handle_callback_query))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    app.add_error_handler(error_handler)

    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
    try:
        scheduler.start()
        logger.info("Scheduler started successfully")
    except Exception as e:
        logger.error(f"Failed to start scheduler: {e}")
        raise

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏
    try:
        await init_scheduler(app)
        logger.info("Scheduler initialized with existing reminders")
    except Exception as e:
        logger.error(f"Failed to initialize scheduler: {e}")
        # –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π

    logger.info("Keep-awake disabled - running on dedicated server")

    # Graceful shutdown handlers
    shutdown_event = asyncio.Event()

    async def shutdown():
        logger.info("Starting graceful shutdown...")

        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–æ—Ç–∞
        try:
            await app.updater.stop()
            await app.stop()
            logger.info("Bot stopped successfully")
        except Exception as e:
            logger.error(f"Error stopping bot: {e}")

        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
        try:
            scheduler.shutdown()
            logger.info("Scheduler shutdown complete")
        except Exception as e:
            logger.error(f"Error shutting down scheduler: {e}")

        logger.info("Shutdown complete")
        shutdown_event.set()

    def signal_handler(signum, frame):
        logger.info(f"Received signal {signum}, initiating shutdown...")
        asyncio.create_task(shutdown())

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
    signal.signal(signal.SIGTERM, signal_handler)
    signal.signal(signal.SIGINT, signal_handler)

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    try:
        await app.initialize()
        await app.start()
        await app.updater.start_polling()
        logger.info("Bot polling started successfully")

        # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª - –ø—Ä–æ—Å—Ç–æ –∂–¥–µ–º —Å–æ–±—ã—Ç–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        logger.info("Bot is now running and waiting for messages...")
        await shutdown_event.wait()

    except Exception as e:
        logger.error(f"Failed to start bot: {e}")
        await shutdown()
        raise

    finally:
        # –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º cleanup –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö
        if not shutdown_event.is_set():
            await shutdown()


if __name__ == "__main__":
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è asyncio –∏—Å–∫–ª—é—á–µ–Ω–∏–π
    def handle_exception(loop, context):
        logger.error(f"AsyncIO exception: {context}")


    loop = asyncio.new_event_loop()
    asyncio.set_event_loop(loop)
    loop.set_exception_handler(handle_exception)

    try:
        loop.run_until_complete(main())
    except KeyboardInterrupt:
        logger.info("Keyboard interrupt received")
    except Exception as e:
        logger.error(f"Main loop error: {e}")
    finally:
        loop.close()
        logger.info("Event loop closed")