import logging.handlers
import os
import re
import signal
from typing import Optional
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    ContextTypes,
    filters,
)
from telegram.error import InvalidToken
from datetime import datetime, timedelta
import pytz
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from db import Database
import asyncio
from aiohttp import web
from aiohttp.web import get, head
from dotenv import load_dotenv
import tenacity
import aiohttp


def setup_logging():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ–º —Ñ–∞–π–ª–æ–≤ –ø–æ –¥–Ω—è–º"""

    log_dir = '/var/log/infinite_memory_bot'
    os.makedirs(log_dir, exist_ok=True)

    # –§–∞–π–ª —Å —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–π –¥–∞—Ç–æ–π
    today = datetime.now().strftime("%d.%m.%Y")
    log_file = os.path.join(log_dir, f'bot_{today}.log')

    # –§–æ—Ä–º–∞—Ç –ª–æ–≥–æ–≤
    formatter = logging.Formatter(
        "%(asctime)s - %(name)s - %(levelname)s - %(message)s",
        datefmt="%Y-%m-%d %H:%M:%S"
    )

    # –§–∞–π–ª–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
    file_handler = logging.FileHandler(log_file, encoding='utf-8')
    file_handler.setFormatter(formatter)
    file_handler.setLevel(logging.DEBUG)

    # –ö–æ–Ω—Å–æ–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
    console_handler = logging.StreamHandler()
    console_handler.setFormatter(formatter)
    console_handler.setLevel(logging.INFO)

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ—Ä–Ω–µ–≤–æ–≥–æ –ª–æ–≥–≥–µ—Ä–∞
    root_logger = logging.getLogger()
    root_logger.setLevel(logging.DEBUG)

    # –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    for handler in root_logger.handlers[:]:
        root_logger.removeHandler(handler)

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    root_logger.addHandler(file_handler)
    root_logger.addHandler(console_handler)

    # –¢–∏—Ö–∏–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
    logging.getLogger("httpcore").setLevel(logging.WARNING)
    logging.getLogger("httpx").setLevel(logging.WARNING)
    logging.getLogger("sqlalchemy.engine").setLevel(logging.WARNING)
    logging.getLogger("apscheduler").setLevel(logging.WARNING)

    logger = logging.getLogger(__name__)
    logger.info("=" * 50)
    logger.info(f"–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ –≤ —Ñ–∞–π–ª: {log_file}")
    logger.info("=" * 50)

    return logger


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logger = setup_logging()

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞
BOT_TOKEN = os.getenv("BOT_TOKEN")
if not BOT_TOKEN:
    logger.error("BOT_TOKEN environment variable is not set")
    raise ValueError("BOT_TOKEN environment variable is not set")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
db = Database()
scheduler = AsyncIOScheduler(timezone="UTC")

# –û—Å–Ω–æ–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
MAIN_KEYBOARD = ReplyKeyboardMarkup(
    [["–ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å", "–î–æ–±–∞–≤–∏—Ç—å —Ç–µ–º—É"], ["–£–¥–∞–ª–∏—Ç—å —Ç–µ–º—É", "–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–µ–º—É"], ["–ö–∞—Ç–µ–≥–æ—Ä–∏–∏"]],
    resize_keyboard=True
)

def parse_utc_offset(text: str) -> str:
    """
    –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç UTC-—Å–º–µ—â–µ–Ω–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'UTC+8', '+8', '-6') –≤ —Ñ–æ—Ä–º–∞—Ç —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'Etc/GMT-8').
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç None, –µ—Å–ª–∏ —Ñ–æ—Ä–º–∞—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π –∏–ª–∏ —Å–º–µ—â–µ–Ω–∏–µ –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ [-12, +14].
    """
    text = text.strip().replace(" ", "").upper()
    text = text.replace("UTC", "")
    match = re.match(r'^([+-]?)(\d{1,2})$', text)
    if not match:
        return None
    sign, offset = match.groups()
    try:
        offset = int(sign + offset)
        if not -12 <= offset <= 14:
            return None
        return f"Etc/GMT{'+' if offset < 0 else '-'}{abs(offset)}"
    except ValueError:
        return None

async def health_check(request):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ GET –∏ HEAD –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è /health.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç JSON {"status": "ok"} –¥–ª—è GET –∏ –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –¥–ª—è HEAD.
    """
    logger.debug(f"Received {request.method} request to /health")
    if request.method == "HEAD":
        return web.Response(status=200)
    return web.json_response({"status": "ok"})


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.debug(f"Received /start command from user {update.effective_user.id}")
    user = db.get_user(update.effective_user.id)
    if user:
        await update.message.reply_text(
            f"–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {update.effective_user.first_name}! üò∫\n"
            f"–¢–≤–æ–π —Ç–µ–∫—É—â–∏–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å: {user.timezone}\n"
            "–•–æ—á–µ—à—å –∏–∑–º–µ–Ω–∏—Ç—å? –ò—Å–ø–æ–ª—å–∑—É–π /tz\n"
            "–ü–æ–º–æ—â—å: /help\n\n"
            "–ü–æ–º–Ω–∏: —Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è = –∑–Ω–∞–Ω–∏—è –Ω–∞–≤—Å–µ–≥–¥–∞! üöÄ",
            reply_markup=MAIN_KEYBOARD
        )
    else:
        await update.message.reply_text(
            "üöÄ *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ç–≤–æ–µ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Ç—Ä–µ–Ω–µ—Ä–∞ –ø–∞–º—è—Ç–∏!*\n\n"

            "üí° *–ó–Ω–∞–µ—à—å –ª–∏ —Ç—ã —á—Ç–æ?*\n"
            "‚Ä¢ 90% –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –º—ã –∑–∞–±—ã–≤–∞–µ–º –∑–∞ –ø–µ—Ä–≤—ã–µ 24 —á–∞—Å–∞\n"
            "‚Ä¢ –ë–µ–∑ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π –∑–Ω–∞–Ω–∏—è –ø—Ä–æ—Å—Ç–æ \"–∏—Å–ø–∞—Ä—è—é—Ç—Å—è\"\n"
            "‚Ä¢ –ú–æ–∂–Ω–æ —É—á–∏—Ç—å —á–∞—Å–∞–º–∏ –∏ –Ω–µ –∑–∞–ø–æ–º–Ω–∏—Ç—å –Ω–∏—á–µ–≥–æ\n\n"

            "üéØ *–ê —Ç–µ–ø–µ—Ä—å —Ö–æ—Ä–æ—à–∏–µ –Ω–æ–≤–æ—Å—Ç–∏:*\n"
            "–ï—Å—Ç—å –Ω–∞—É—á–Ω—ã–π —Å–ø–æ—Å–æ–± –∑–∞–ø–æ–º–∏–Ω–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é *–Ω–∞–≤—Å–µ–≥–¥–∞*!\n\n"

            "üî¨ *–ú–µ—Ç–æ–¥ –∏–Ω—Ç–µ—Ä–≤–∞–ª—å–Ω–æ–≥–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è:*\n"
            "–Ø –Ω–∞–ø–æ–º–∏–Ω–∞—é –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –≤ –∏–¥–µ–∞–ª—å–Ω—ã–µ –º–æ–º–µ–Ω—Ç—ã:\n"
            "‚Ä¢ –ö–æ–≥–¥–∞ —Ç—ã –≤–æ—Ç-–≤–æ—Ç –∑–∞–±—É–¥–µ—à—å\n"
            "‚Ä¢ –ß—Ç–æ–±—ã –∑–∞–∫—Ä–µ–ø–∏—Ç—å –≤ –¥–æ–ª–≥–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–π –ø–∞–º—è—Ç–∏\n"
            "‚Ä¢ –ë–µ–∑ –ª–∏—à–Ω–∏—Ö —É—Å–∏–ª–∏–π —Å —Ç–≤–æ–µ–π —Å—Ç–æ—Ä–æ–Ω—ã\n\n"

            "üìä *–í—Å–µ–≥–æ 7 –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π = –∑–Ω–∞–Ω–∏–µ –Ω–∞ –≥–æ–¥—ã:*\n"
            "1 —á–∞—Å ‚Üí 1 –¥–µ–Ω—å ‚Üí 3 –¥–Ω—è ‚Üí 1 –Ω–µ–¥–µ–ª—è ‚Üí 2 –Ω–µ–¥–µ–ª–∏ ‚Üí 1 –º–µ—Å—è—Ü ‚Üí 3 –º–µ—Å—è—Ü–∞\n\n"

            "‚ú® *–ß—Ç–æ —ç—Ç–æ —Ç–µ–±–µ –¥–∞—ë—Ç:*\n"
            "‚Ä¢ –ó–∞–ø–æ–º–∏–Ω–∞–µ—à—å –≤ 3 —Ä–∞–∑–∞ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–µ–µ\n"
            "‚Ä¢ –¢—Ä–∞—Ç–∏—à—å –≤—Å–µ–≥–æ 5-15 –º–∏–Ω—É—Ç –≤ –¥–µ–Ω—å\n"
            "‚Ä¢ –ó–Ω–∞–Ω–∏—è –æ—Å—Ç–∞—é—Ç—Å—è —Å —Ç–æ–±–æ–π –Ω–∞–≤—Å–µ–≥–¥–∞\n"
            "‚Ä¢ –£—á–∏—à—å—Å—è –±–µ–∑ —Å—Ç—Ä–µ—Å—Å–∞ –∏ –Ω–∞–ø—Ä—è–∂–µ–Ω–∏—è\n\n"

            "üéØ *–ù–∞—á–Ω–∏ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å:*\n"
            "1. –í—ã–±–µ—Ä–∏ —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å (—á—Ç–æ–±—ã –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø—Ä–∏—Ö–æ–¥–∏–ª–∏ –≤–æ–≤—Ä–µ–º—è)\n"
            "2. –î–æ–±–∞–≤—å –ø–µ—Ä–≤—É—é —Ç–µ–º—É\n"
            "3. –û—Ç–º–µ—á–∞–π –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è –∫–æ–≥–¥–∞ —è –Ω–∞–ø–æ–º–∏–Ω–∞—é\n"
            "4. –°–ª–µ–¥–∏ –∫–∞–∫ —Ä–∞—Å—Ç—ë—Ç —Ç–≤–æ—è —ç—Ä—É–¥–∏—Ü–∏—è!\n\n"

            "‚è∞ *–í—ã–±–µ—Ä–∏ —Å–≤–æ–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å:*\n"
            "–ù–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'Europe/Moscow') –∏–ª–∏ —Å–º–µ—â–µ–Ω–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'UTC+3')\n"
            "–ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π /tz –¥–ª—è –≤—ã–±–æ—Ä–∞ –∏–∑ —Å–ø–∏—Å–∫–∞",
            reply_markup=ReplyKeyboardMarkup([["/tz"]], resize_keyboard=True),
            parse_mode="Markdown"
        )
    logger.debug(f"Sent start response to user {update.effective_user.id}")


async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    logger.debug(f"Received /help command from user {user_id}")

    help_text = (
        "üöÄ –¢–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Ç—Ä–µ–Ω–µ—Ä –ø–∞–º—è—Ç–∏ - –∑–∞–ø–æ–º–∏–Ω–∞–π –Ω–∞–≤—Å–µ–≥–¥–∞!\n\n"

        "üí° –ù–∞—É—á–Ω—ã–π –ø–æ–¥—Ö–æ–¥ –∫ –∑–∞–ø–æ–º–∏–Ω–∞–Ω–∏—é:\n"
        "–ù–∞—à –º–æ–∑–≥ –∑–∞–±—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–π –∫—Ä–∏–≤–æ–π (–∫—Ä–∏–≤–∞—è –≠–±–±–∏–Ω–≥–∞—É–∑–∞). "
        "90% –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∑–∞–±—ã–≤–∞–µ—Ç—Å—è –∑–∞ –ø–µ—Ä–≤—ã–µ 24 —á–∞—Å–∞, –µ—Å–ª–∏ –µ—ë –Ω–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å!\n\n"

        "üéØ –ü–æ—á–µ–º—É –∏–º–µ–Ω–Ω–æ —Ç–∞–∫–∞—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å?\n"
        "1 —á–∞—Å - —Ñ–∏–∫—Å–∏—Ä—É–µ–º –≤ –∫—Ä–∞—Ç–∫–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–π –ø–∞–º—è—Ç–∏\n"
        "1 –¥–µ–Ω—å - –ø–µ—Ä–µ–Ω–æ—Å–∏–º –≤ —Å—Ä–µ–¥–Ω–µ—Å—Ä–æ—á–Ω—É—é –ø–∞–º—è—Ç—å  \n"
        "3 –¥–Ω—è - —É—Å–∏–ª–∏–≤–∞–µ–º –Ω–µ–π—Ä–æ–Ω–Ω—ã–µ —Å–≤—è–∑–∏\n"
        "1-2 –Ω–µ–¥–µ–ª–∏ - –∑–∞–∫—Ä–µ–ø–ª—è–µ–º –≤ –¥–æ–ª–≥–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–π –ø–∞–º—è—Ç–∏\n"
        "1-3 –º–µ—Å—è—Ü–∞ - –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–æ —Ñ–∏–∫—Å–∏—Ä—É–µ–º\n\n"

        "üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: –ü–æ—Å–ª–µ 7 –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –≤ –¥–æ–ª–≥–æ–≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–º—è—Ç—å "
        "–∏ –æ—Å—Ç–∞—ë—Ç—Å—è —Å —Ç–æ–±–æ–π –Ω–∞ –≥–æ–¥—ã!\n\n"

        "üî¨ –≠—Ç–æ –Ω–µ –ø—Ä–æ—Å—Ç–æ —Ü–∏—Ñ—Ä—ã:\n"
        "–ú–µ—Ç–æ–¥ –∏–Ω—Ç–µ—Ä–≤–∞–ª—å–Ω–æ–≥–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è –Ω–∞—É—á–Ω–æ –¥–æ–∫–∞–∑–∞–Ω –∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è:\n"
        "‚Ä¢ –í –æ–±—É—á–µ–Ω–∏–∏ –≤—Ä–∞—á–µ–π –∏ –ø–∏–ª–æ—Ç–æ–≤\n"
        "‚Ä¢ –ü—Ä–∏ –∏–∑—É—á–µ–Ω–∏–∏ –∏–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã—Ö —è–∑—ã–∫–æ–≤\n"
        "‚Ä¢ –í –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –∫ —Å–µ—Ä—å—ë–∑–Ω—ã–º —ç–∫–∑–∞–º–µ–Ω–∞–º\n"
        "‚Ä¢ –°–ø–æ—Ä—Ç—Å–º–µ–Ω–∞–º–∏ –¥–ª—è –∑–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —Ç–∞–∫—Ç–∏–∫\n\n"

        "üéØ –ß—Ç–æ –º–æ–∂–Ω–æ —É—á–∏—Ç—å:\n"
        "‚Ä¢ –ò–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã–µ —Å–ª–æ–≤–∞ –∏ —Ñ—Ä–∞–∑—ã\n"
        "‚Ä¢ –ù–∞—É—á–Ω—ã–µ —Ç–µ—Ä–º–∏–Ω—ã –∏ —Ñ–æ—Ä–º—É–ª—ã\n"
        "‚Ä¢ –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞—Ç—ã –∏ —Ñ–∞–∫—Ç—ã\n"
        "‚Ä¢ –ö–æ–¥ –∏ –∞–ª–≥–æ—Ä–∏—Ç–º—ã\n"
        "‚Ä¢ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ —ç–∫–∑–∞–º–µ–Ω–∞–º\n"
        "‚Ä¢ –ò –≤—Å—ë —á—Ç–æ —É–≥–æ–¥–Ω–æ!\n\n"

        "üõ† –ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç:\n"
        "1. –î–æ–±–∞–≤—å —Ç–µ–º—É - –Ω–∞—á–Ω–∏ —Å 2-3 —Ç–µ–º\n"
        "2. –û—Ç–º–µ—á–∞–π ¬´–ü–æ–≤—Ç–æ—Ä–∏–ª!¬ª –ø–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º\n"
        "3. –°–ª–µ–¥–∏ –∑–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º - —Å–º–æ—Ç—Ä–∏ –∫–∞–∫ –∑–Ω–∞–Ω–∏—è –∑–∞–∫—Ä–µ–ø–ª—è—é—Ç—Å—è\n"
        "4. –î–æ—Å—Ç–∏–≥–∞–π 100% - –ø–æ–ª—É—á–∞–π –∑–Ω–∞–Ω–∏—è –Ω–∞–≤—Å–µ–≥–¥–∞!\n\n"

        "üìã –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "‚Ä¢ –î–æ–±–∞–≤–∏—Ç—å —Ç–µ–º—É - —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é —Ç–µ–º—É\n"
        "‚Ä¢ –ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å - —É–≤–∏–¥–µ—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å\n"
        "‚Ä¢ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ - –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞—Ç—å —Ç–µ–º—ã\n"
        "‚Ä¢ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–µ–º—É - –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–≤–µ—Ä—à—ë–Ω–Ω–æ–µ\n\n"

        "üí´ –ü–æ–ø—Ä–æ–±—É–π –≤—Å–µ–≥–æ 1 —Ç–µ–º—É –∏ —É–≤–∏–¥–∏—à—å –∫–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç!\n"
        "–ß–µ—Ä–µ–∑ –Ω–µ–¥–µ–ª—é —Ç—ã —É–¥–∏–≤–∏—à—å—Å—è —Å–∫–æ–ª—å–∫–æ –∑–∞–ø–æ–º–Ω–∏–ª –±–µ–∑ —É—Å–∏–ª–∏–π.\n\n"

        "üéâ –ì–æ—Ç–æ–≤ –Ω–∞—á–∞—Ç—å? –ù–∞–∂–º–∏ ¬´–î–æ–±–∞–≤–∏—Ç—å —Ç–µ–º—É¬ª –∏ —É–±–µ–¥–∏—Å—å —Å–∞–º!\n\n"
        "‚ùì –ï—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã? –ü–∏—à–∏: @garage_pineapple"
    )

    await update.message.reply_text(
        help_text,
        reply_markup=MAIN_KEYBOARD
        # –£–±—Ä–∞–ª parse_mode —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–æ–∫ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    )
    logger.debug(f"Sent help response to user {user_id}")

async def reset(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    context.user_data["state"] = None
    context.user_data.clear()
    await update.message.reply_text(
        "–°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–±—Ä–æ—à–µ–Ω–æ! üò∫",
        reply_markup=MAIN_KEYBOARD
    )
    logger.debug(f"User {user_id} reset state")

async def handle_timezone(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    text = update.message.text.split(maxsplit=1)[1] if len(update.message.text.split()) > 1 else None
    logger.debug(f"User {user_id} sent timezone command: {text}")

    if text == "list":
        await update.message.reply_text(
            "–ü–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ —á–∞—Å–æ–≤—ã—Ö –ø–æ—è—Å–æ–≤: https://en.wikipedia.org/wiki/List_of_tz_database_time_zones\n"
            "–û—Ç–ø—Ä–∞–≤—å –Ω–∞–∑–≤–∞–Ω–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'Europe/Moscow') –∏–ª–∏ —Å–º–µ—â–µ–Ω–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'UTC+8' –∏–ª–∏ '+8').",
            reply_markup=MAIN_KEYBOARD
        )
        return

    if text:
        timezone = parse_utc_offset(text)
        if timezone:
            try:
                pytz.timezone(timezone)
                db.save_user(user_id, update.effective_user.username or "", timezone)
                logger.debug(f"User {user_id} saved with timezone {timezone} (from UTC offset {text})")
                await update.message.reply_text(
                    f"–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å {timezone} (UTC{text}) —Å–æ—Ö—Ä–∞–Ω–µ–Ω! üò∫",
                    reply_markup=MAIN_KEYBOARD
                )
                schedule_daily_check(user_id, timezone)
                context.user_data["state"] = None
                return
            except Exception as e:
                logger.error(f"Error validating UTC timezone {timezone}: {str(e)}")
        try:
            pytz.timezone(text)
            db.save_user(user_id, update.effective_user.username or "", text)
            logger.debug(f"User {user_id} saved with timezone {text}")
            await update.message.reply_text(
                f"–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å {text} —Å–æ—Ö—Ä–∞–Ω–µ–Ω! üò∫",
                reply_markup=MAIN_KEYBOARD
            )
            schedule_daily_check(user_id, text)
            context.user_data["state"] = None
            return
        except Exception as e:
            logger.error(f"Error saving user timezone: {str(e)}")
            await update.message.reply_text(
                "–û–π, —á—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫ —Å —á–∞—Å–æ–≤—ã–º –ø–æ—è—Å–æ–º. üòî –ü–æ–ø—Ä–æ–±—É–π –Ω–∞–∑–≤–∞–Ω–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'Europe/Moscow') –∏–ª–∏ —Å–º–µ—â–µ–Ω–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'UTC+8' –∏–ª–∏ '+8').",
                reply_markup=MAIN_KEYBOARD
            )
        return

    keyboard = [
        [
            InlineKeyboardButton("Europe/Moscow (MSK, UTC+3)", callback_data="tz:Europe/Moscow"),
            InlineKeyboardButton("America/New_York (EST, UTC-5)", callback_data="tz:America/New_York"),
        ],
        [
            InlineKeyboardButton("Europe/London (GMT, UTC+0)", callback_data="tz:Europe/London"),
            InlineKeyboardButton("Asia/Tokyo (JST, UTC+9)", callback_data="tz:Asia/Tokyo"),
        ],
        [InlineKeyboardButton("–î—Ä—É–≥–æ–π (–≤–≤–µ–¥–∏ –≤—Ä—É—á–Ω—É—é)", callback_data="tz:manual")],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏ —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –∏–ª–∏ –≤–≤–µ–¥–∏ –µ–≥–æ –≤—Ä—É—á–Ω—É—é (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'Europe/Moscow' –∏–ª–∏ 'UTC+8'):",
        reply_markup=reply_markup
    )
    context.user_data["state"] = "awaiting_timezone"
    logger.debug(f"User {user_id} prompted to select timezone")

async def show_progress(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user = db.get_user(user_id)
    if not user:
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å —Å –ø–æ–º–æ—â—å—é /start –∏–ª–∏ /tz.",
            reply_markup=ReplyKeyboardMarkup([["/tz"]], resize_keyboard=True)
        )
        return
    categories = db.get_categories(user_id)
    keyboard = [
        [InlineKeyboardButton(category.category_name, callback_data=f"category_progress:{category.category_id}")]
        for category in categories
    ]
    keyboard.append([InlineKeyboardButton("üìÅ –ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏", callback_data="category_progress:none")])
    reply_markup = InlineKeyboardMarkup(keyboard)
    text = "–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞:"
    if update.callback_query:
        await update.callback_query.edit_message_text(
            text,
            reply_markup=reply_markup
        )
    else:
        await update.message.reply_text(
            text,
            reply_markup=reply_markup
        )
    context.user_data["state"] = "awaiting_category_progress"
    logger.debug(f"User {user_id} requested progress, showing category selection")


async def show_category_progress(update: Update, context: ContextTypes.DEFAULT_TYPE, category_id: Optional[int],
                                 timezone: str):
    user_id = update.effective_user.id
    logger.debug(f"User {user_id} requested progress for category {category_id}")
    topics = db.get_active_topics(user_id, timezone, category_id=category_id)
    total_repetitions = 7
    category_name = db.get_category(category_id, user_id).category_name if category_id else "üìÅ –ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"

    if not topics:
        reply_markup = InlineKeyboardMarkup([[InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_to_progress")]])
        text = f"–í –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category_name}' –ø–æ–∫–∞ –Ω–µ—Ç —Ç–µ–º! üòø"
        if update.callback_query:
            await update.callback_query.edit_message_text(
                text,
                reply_markup=reply_markup
            )
            await update.callback_query.answer()
        else:
            await update.message.reply_text(
                text,
                reply_markup=reply_markup
            )
        return

    tz = pytz.timezone(timezone)
    now_utc = datetime.utcnow()
    now_local = pytz.utc.localize(now_utc).astimezone(tz)
    message = f"üìö {category_name} ({timezone}) üò∫\n\n"
    for topic in topics:
        next_review_local = db._from_utc_naive(topic.next_review, timezone) if topic.next_review else None
        progress_percentage = (topic.completed_repetitions / total_repetitions) * 100
        progress_bar = "‚ñà" * int(topic.completed_repetitions) + "‚ñë" * (total_repetitions - topic.completed_repetitions)
        if topic.is_completed:
            status = "–ó–∞–≤–µ—Ä—à–µ–Ω–æ"
        elif next_review_local:
            status = next_review_local.strftime('%d.%m.%Y %H:%M') if next_review_local > now_local else "–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–æ"
        else:
            status = "–ó–∞–≤–µ—Ä—à–µ–Ω–æ"
        message += (
            f"üìñ {topic.topic_name}\n"
            f"‚è∞ –°–ª–µ–¥—É—é—â–µ–µ: {status}\n"
            f"‚úÖ –ü—Ä–æ–≥—Ä–µ—Å—Å: {progress_bar} {topic.completed_repetitions}/{total_repetitions} ({progress_percentage:.1f}%)\n"
            f"‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
        )

    reply_markup = InlineKeyboardMarkup([[InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_to_progress")]])
    try:
        if update.callback_query:
            await update.callback_query.edit_message_text(
                message,
                reply_markup=reply_markup
            )
            await update.callback_query.answer()
        else:
            await update.message.reply_text(
                message,
                reply_markup=reply_markup
            )
    except Exception as e:
        logger.error(f"Error sending category progress for user {user_id}, category {category_id}: {str(e)}")
        error_message = "–û–π, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞! üòø –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π /reset."
        if update.callback_query:
            await update.callback_query.edit_message_text(
                error_message,
                reply_markup=reply_markup
            )
            await update.callback_query.answer()
        else:
            await update.message.reply_text(
                error_message,
                reply_markup=reply_markup
            )

async def handle_callback_query(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    data = query.data
    user_id = update.effective_user.id
    user = db.get_user(user_id)
    if not user:
        await query.answer()
        return

    if data.startswith("tz:"):
        timezone = data.split(":", 1)[1]
        if timezone == "manual":
            await query.message.edit_text(
                "–í–≤–µ–¥–∏ —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –≤—Ä—É—á–Ω—É—é (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'Europe/Moscow' –∏–ª–∏ 'UTC+8'):",
            )
            context.user_data["state"] = "awaiting_manual_timezone"
        else:
            db.save_user(user_id, update.effective_user.username or "", timezone)
            schedule_daily_check(user_id, timezone)
            await query.message.edit_text(
                f"–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å {timezone} —Å–æ—Ö—Ä–∞–Ω–µ–Ω! üò∫",
                reply_markup=MAIN_KEYBOARD
            )
        await query.answer()
        context.user_data["state"] = None
        return

    if data.startswith("category_progress:"):
        category_id_str = data.split(":", 1)[1]
        category_id = int(category_id_str) if category_id_str != "none" else None
        await show_category_progress(update, context, category_id, user.timezone)
        return

    if data == "back_to_progress":
        await show_progress(update, context)
        await query.answer()
        return

    if data.startswith("add_topic_category:"):
        category_id_str = data.split(":", 1)[1]
        category_id = int(category_id_str) if category_id_str != "none" else None
        topic_name = context.user_data.get("new_topic_name")
        if topic_name:
            try:
                topic_id, reminder_id = db.add_topic(user_id, topic_name, user.timezone, category_id)
                tz = pytz.timezone(user.timezone)
                scheduler.add_job(
                    send_reminder,
                    "date",
                    run_date=db._from_utc_naive(db.get_reminder(reminder_id).scheduled_time, user.timezone),
                    args=[app.bot, user_id, topic_name, reminder_id],
                    id=f"reminder_{reminder_id}_{user_id}",
                    timezone=tz,
                    misfire_grace_time=None
                )
                await query.message.delete()
                await query.message.reply_text(
                    f"–¢–µ–º–∞ '{topic_name}' –¥–æ–±–∞–≤–ª–µ–Ω–∞! üò∫ –ü–µ—Ä–≤–æ–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 1 —á–∞—Å.",
                    reply_markup=MAIN_KEYBOARD
                )
                logger.debug(f"User {user_id} added topic '{topic_name}' with reminder {reminder_id}")
            except Exception as e:
                logger.error(f"Error adding topic '{topic_name}' for user {user_id}: {str(e)}")
                await query.message.delete()
                await query.message.reply_text(
                    "–û–π, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–µ–º—ã. üòî –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞!",
                    reply_markup=MAIN_KEYBOARD
                )
        context.user_data["state"] = None
        context.user_data.pop("new_topic_name", None)
        await query.answer()
        return

    if data.startswith("delete_category_select:"):
        category_id_str = data.split(":", 1)[1]
        category_id = int(category_id_str) if category_id_str != "none" else None

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–º—ã –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        topics = db.get_active_topics(user_id, user.timezone, category_id=category_id)

        if not topics:
            await query.answer("–í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ—Ç —Ç–µ–º –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è! üòø")
            return

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ç–µ–º–∞–º–∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        keyboard = []
        for topic in topics:
            category_name = db.get_category(topic.category_id,
                                            user_id).category_name if topic.category_id else "üìÅ –ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"
            keyboard.append([
                InlineKeyboardButton(
                    f"{topic.topic_name} ({category_name})",
                    callback_data=f"delete:{topic.topic_id}"
                )
            ])

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º"
        keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data="back_to_delete_categories")])

        reply_markup = InlineKeyboardMarkup(keyboard)

        category_name = db.get_category(category_id, user_id).category_name if category_id else "üìÅ –ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"
        await query.message.edit_text(
            f"–í—ã–±–µ—Ä–∏ —Ç–µ–º—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category_name}':",
            reply_markup=reply_markup
        )
        context.user_data["state"] = "awaiting_topic_deletion"
        await query.answer()
        return

    if data == "delete_all_topics":
        # –û—Å—Ç–∞–≤–ª—è–µ–º —Å—Ç–∞—Ä—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –¥–ª—è —Ç–µ—Ö, –∫—Ç–æ —Ö–æ—á–µ—Ç –≤–∏–¥–µ—Ç—å –≤—Å–µ —Ç–µ–º—ã —Å—Ä–∞–∑—É
        topics = db.get_active_topics(user_id, user.timezone, category_id='all')
        if not topics:
            await query.answer("–£ —Ç–µ–±—è –Ω–µ—Ç —Ç–µ–º –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è! üòø")
            return

        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–≤–æ–¥–∏–º—ã—Ö —Ç–µ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–µ—Ä–≤—ã–µ 20)
        limited_topics = topics[:20]

        keyboard = []
        for topic in limited_topics:
            category_name = db.get_category(topic.category_id,
                                            user_id).category_name if topic.category_id else "üìÅ –ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"
            keyboard.append([
                InlineKeyboardButton(
                    f"{topic.topic_name} ({category_name})",
                    callback_data=f"delete:{topic.topic_id}"
                )
            ])

        # –ï—Å–ª–∏ —Ç–µ–º –±–æ–ª—å—à–µ 20, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        if len(topics) > 20:
            keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data="back_to_delete_categories")])
            await query.message.edit_text(
                f"–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Ç–µ–º –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è ({len(topics)}). –ü–æ–∫–∞–∑–∞–Ω—ã –ø–µ—Ä–≤—ã–µ 20. –õ—É—á—à–µ –∏—Å–ø–æ–ª—å–∑—É–π –≤—ã–±–æ—Ä –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º.",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
        else:
            keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data="back_to_delete_categories")])
            await query.message.edit_text(
                "–í—ã–±–µ—Ä–∏ —Ç–µ–º—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è (–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±—É–¥–µ—Ç –Ω–µ–ª—å–∑—è):",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )

        context.user_data["state"] = "awaiting_topic_deletion"
        await query.answer()
        return

    if data == "back_to_delete_categories":
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        categories = db.get_categories(user_id)

        keyboard = []
        for category in categories:
            topics_in_category = db.get_active_topics(user_id, user.timezone, category.category_id)
            if topics_in_category:
                keyboard.append([
                    InlineKeyboardButton(
                        f"{category.category_name} ({len(topics_in_category)})",
                        callback_data=f"delete_category_select:{category.category_id}"
                    )
                ])

        topics_no_category = db.get_active_topics(user_id, user.timezone, category_id=None)
        if topics_no_category:
            keyboard.append([
                InlineKeyboardButton(
                    f"üìÅ –ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ({len(topics_no_category)})",
                    callback_data="delete_category_select:none"
                )
            ])

        keyboard.append([
            InlineKeyboardButton("üîç –í—Å–µ —Ç–µ–º—ã —Å—Ä–∞–∑—É", callback_data="delete_all_topics")
        ])

        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.message.edit_text(
            "–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ç–µ–º:",
            reply_markup=reply_markup
        )
        context.user_data["state"] = "awaiting_delete_category"
        await query.answer()
        return

    if data.startswith("delete:"):
        topic_id = int(data.split(":", 1)[1])

        # –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º –≤—Å–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –î–û —É–¥–∞–ª–µ–Ω–∏—è —Ç–µ–º—ã
        reminders = db.get_reminders_by_topic(topic_id)

        if db.delete_topic(topic_id, user_id):
            # –£–¥–∞–ª—è–µ–º –≤—Å–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —ç—Ç–æ–π —Ç–µ–º—ã –∏–∑ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
            for reminder in reminders:
                job_id = f"reminder_{reminder.reminder_id}_{user_id}"
                job = scheduler.get_job(job_id)
                if job:
                    job.remove()  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –∏—Å–ø–æ–ª—å–∑—É–µ–º job.remove() –≤–º–µ—Å—Ç–æ scheduler.remove_job()
                    logger.debug(f"Removed scheduled job {job_id} for deleted topic")
                else:
                    logger.debug(f"Job {job_id} not found in scheduler (maybe already executed)")

            await query.message.delete()
            await query.message.reply_text(
                "–¢–µ–º–∞ –∏ –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —É–¥–∞–ª–µ–Ω—ã! üòø",
                reply_markup=MAIN_KEYBOARD
            )
            logger.debug(f"User {user_id} deleted topic {topic_id} with all reminders")
        else:
            await query.message.delete()
            await query.message.reply_text(
                "–¢–µ–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. üòø",
                reply_markup=MAIN_KEYBOARD
            )
        context.user_data["state"] = None
        await query.answer()
        return

    if data.startswith("restore_category_select:"):
        category_id_str = data.split(":", 1)[1]
        category_id = int(category_id_str) if category_id_str != "none" else None

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ —Ç–µ–º—ã
        completed_topics = db.get_completed_topics(user_id)

        # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–µ–º—ã –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        if category_id is not None:
            filtered_topics = [t for t in completed_topics if t.category_id == category_id]
        else:
            filtered_topics = [t for t in completed_topics if t.category_id is None]

        if not filtered_topics:
            await query.answer("–í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ—Ç –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö —Ç–µ–º! üòø")
            return

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ç–µ–º–∞–º–∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        keyboard = []
        for topic in filtered_topics:
            category_name = db.get_category(topic.category_id,
                                            user_id).category_name if topic.category_id else "üìÅ –ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"
            keyboard.append([
                InlineKeyboardButton(
                    f"{topic.topic_name} ({category_name})",
                    callback_data=f"restore:{topic.completed_topic_id}"
                )
            ])

        keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data="back_to_restore_categories")])
        reply_markup = InlineKeyboardMarkup(keyboard)

        category_name = db.get_category(category_id, user_id).category_name if category_id else "üìÅ –ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"
        await query.message.edit_text(
            f"–í—ã–±–µ—Ä–∏ —Ç–µ–º—É –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category_name}':",
            reply_markup=reply_markup
        )
        context.user_data["state"] = "awaiting_topic_restoration"
        await query.answer()
        return

    if data == "restore_all_topics":
        completed_topics = db.get_completed_topics(user_id)
        if not completed_topics:
            await query.answer("–£ —Ç–µ–±—è –Ω–µ—Ç –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö —Ç–µ–º –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è! üòø")
            return

        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–≤–æ–¥–∏–º—ã—Ö —Ç–µ–º
        limited_topics = completed_topics[:20]

        keyboard = []
        for topic in limited_topics:
            category_name = db.get_category(topic.category_id,
                                            user_id).category_name if topic.category_id else "üìÅ –ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"
            keyboard.append([
                InlineKeyboardButton(
                    f"{topic.topic_name} ({category_name})",
                    callback_data=f"restore:{topic.completed_topic_id}"
                )
            ])

        if len(completed_topics) > 20:
            keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data="back_to_restore_categories")])
            await query.message.edit_text(
                f"–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Ç–µ–º –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è ({len(completed_topics)}). –ü–æ–∫–∞–∑–∞–Ω—ã –ø–µ—Ä–≤—ã–µ 20. –õ—É—á—à–µ –∏—Å–ø–æ–ª—å–∑—É–π –≤—ã–±–æ—Ä –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º.",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
        else:
            keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data="back_to_restore_categories")])
            await query.message.edit_text(
                "–í—ã–±–µ—Ä–∏ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—É—é —Ç–µ–º—É –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è:",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )

        context.user_data["state"] = "awaiting_topic_restoration"
        await query.answer()
        return

    if data == "back_to_restore_categories":
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
        completed_topics = db.get_completed_topics(user_id)

        categories_dict = {}
        no_category_topics = []

        for topic in completed_topics:
            if topic.category_id:
                if topic.category_id not in categories_dict:
                    category = db.get_category(topic.category_id, user_id)
                    if category:
                        categories_dict[topic.category_id] = {
                            'name': category.category_name,
                            'topics': []
                        }
                categories_dict[topic.category_id]['topics'].append(topic)
            else:
                no_category_topics.append(topic)

        keyboard = []

        for category_id, category_data in categories_dict.items():
            if category_data['topics']:
                keyboard.append([
                    InlineKeyboardButton(
                        f"{category_data['name']} ({len(category_data['topics'])})",
                        callback_data=f"restore_category_select:{category_id}"
                    )
                ])

        if no_category_topics:
            keyboard.append([
                InlineKeyboardButton(
                    f"üìÅ –ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ({len(no_category_topics)})",
                    callback_data="restore_category_select:none"
                )
            ])

        keyboard.append([
            InlineKeyboardButton("üîç –í—Å–µ —Ç–µ–º—ã —Å—Ä–∞–∑—É", callback_data="restore_all_topics")
        ])

        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.message.edit_text(
            "–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–µ–º:",
            reply_markup=reply_markup
        )
        context.user_data["state"] = "awaiting_restore_category"
        await query.answer()
        return

    if data.startswith("restore:"):
        completed_topic_id = int(data.split(":", 1)[1])
        result = db.restore_topic(completed_topic_id, user_id, user.timezone)
        if result:
            topic_id, topic_name = result
            reminder_id = db.get_reminder_by_topic(topic_id).reminder_id
            tz = pytz.timezone(user.timezone)
            scheduler.add_job(
                send_reminder,
                "date",
                run_date=db._from_utc_naive(db.get_reminder(reminder_id).scheduled_time, user.timezone),
                args=[app.bot, user_id, topic_name, reminder_id],
                id=f"reminder_{reminder_id}_{user_id}",
                timezone=tz,
                misfire_grace_time=None
            )
            await query.message.delete()
            await query.message.reply_text(
                f"–¢–µ–º–∞ '{topic_name}' –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞! üò∫ –ü–µ—Ä–≤–æ–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 1 —á–∞—Å.",
                reply_markup=MAIN_KEYBOARD
            )
            logger.debug(f"User {user_id} restored topic {topic_name}")
        else:
            await query.message.delete()
            await query.message.reply_text(
                "–¢–µ–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. üòø",
                reply_markup=MAIN_KEYBOARD
            )
        context.user_data["state"] = None
        await query.answer()
        return

    if data.startswith("category_action:"):
        action = data.split(":", 1)[1]
        if action == "create":
            context.user_data["state"] = "awaiting_category_name"
            await query.message.reply_text(
                "–ù–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏! üòä",
                reply_markup=ReplyKeyboardMarkup([["–û—Ç–º–µ–Ω–∞"]], resize_keyboard=True)
            )
        elif action == "rename":
            categories = db.get_categories(user_id)
            if not categories:
                await query.message.reply_text(
                    "–£ —Ç–µ–±—è –Ω–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è! üòø",
                    reply_markup=MAIN_KEYBOARD
                )
                context.user_data["state"] = None
                await query.answer()
                return
            keyboard = [
                [InlineKeyboardButton(category.category_name, callback_data=f"rename_category:{category.category_id}")]
                for category in categories
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.message.reply_text(
                "–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è:", reply_markup=reply_markup
            )
            context.user_data["state"] = "awaiting_category_rename"
        elif action == "delete":
            categories = db.get_categories(user_id)
            if not categories:
                await query.message.reply_text(
                    "–£ —Ç–µ–±—è –Ω–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è! üòø",
                    reply_markup=MAIN_KEYBOARD
                )
                context.user_data["state"] = None
                await query.answer()
                return
            keyboard = [
                [InlineKeyboardButton(category.category_name, callback_data=f"delete_category:{category.category_id}")]
                for category in categories
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.message.reply_text(
                "–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è (—Ç–µ–º—ã –ø–µ—Ä–µ–π–¥—É—Ç –≤ '–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏'):", reply_markup=reply_markup
            )
            context.user_data["state"] = "awaiting_category_deletion"
        elif action == "move":
            topics = db.get_active_topics(user_id, user.timezone, category_id='all')
            if not topics:
                await query.message.reply_text(
                    "–£ —Ç–µ–±—è –Ω–µ—Ç —Ç–µ–º –¥–ª—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è! üòø",
                    reply_markup=MAIN_KEYBOARD
                )
                context.user_data["state"] = None
                await query.answer()
                return
            keyboard = [
                [InlineKeyboardButton(topic.topic_name, callback_data=f"move_topic:{topic.topic_id}")]
                for topic in topics
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.message.reply_text(
                "–í—ã–±–µ—Ä–∏ —Ç–µ–º—É –¥–ª—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è:", reply_markup=reply_markup
            )
            context.user_data["state"] = "awaiting_topic_selection_move"
        await query.answer()
        return

    if data.startswith("rename_category:"):
        category_id = int(data.split(":", 1)[1])
        context.user_data["rename_category_id"] = category_id
        context.user_data["state"] = "awaiting_new_category_name"
        await query.message.reply_text(
            "–ù–∞–ø–∏—à–∏ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏! üòä",
            reply_markup=ReplyKeyboardMarkup([["–û—Ç–º–µ–Ω–∞"]], resize_keyboard=True)
        )
        await query.answer()
        return

    if data.startswith("delete_category:"):
        category_id = int(data.split(":", 1)[1])
        if db.delete_category(category_id, user_id):
            await query.message.reply_text(
                "–ö–∞—Ç–µ–≥–æ—Ä–∏—è —É–¥–∞–ª–µ–Ω–∞! –¢–µ–º—ã –ø–µ—Ä–µ–º–µ—â–µ–Ω—ã –≤ '–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏'. üò∫",
                reply_markup=MAIN_KEYBOARD
            )
            logger.debug(f"User {user_id} deleted category {category_id}")
        else:
            await query.message.reply_text(
                "–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. üòø",
                reply_markup=MAIN_KEYBOARD
            )
        context.user_data["state"] = None
        await query.answer()
        return

    if data.startswith("move_topic:"):
        topic_id = int(data.split(":", 1)[1])
        context.user_data["move_topic_id"] = topic_id
        categories = db.get_categories(user_id)
        keyboard = [
            [InlineKeyboardButton(category.category_name, callback_data=f"move_to_category:{category.category_id}")]
            for category in categories
        ]
        keyboard.append([InlineKeyboardButton("–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏", callback_data="move_to_category:none")])
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.message.reply_text(
            "–í—ã–±–µ—Ä–∏ –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —Ç–µ–º—ã:", reply_markup=reply_markup
        )
        context.user_data["state"] = "awaiting_category_selection"
        await query.answer()
        return

    if data.startswith("move_to_category:"):
        category_id_str = data.split(":", 1)[1]
        category_id = int(category_id_str) if category_id_str != "none" else None
        topic_id = context.user_data.get("move_topic_id")
        if db.move_topic_to_category(topic_id, user_id, category_id):
            category_name = db.get_category(category_id, user_id).category_name if category_id else "–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"
            await query.message.reply_text(
                f"–¢–µ–º–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∞ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—é '{category_name}'! üò∫",
                reply_markup=MAIN_KEYBOARD
            )
            logger.debug(f"User {user_id} moved topic {topic_id} to category {category_id}")
        else:
            await query.message.reply_text(
                "–¢–µ–º–∞ –∏–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. üòø",
                reply_markup=MAIN_KEYBOARD
            )
        context.user_data["state"] = None
        context.user_data.pop("move_topic_id", None)
        await query.answer()
        return

    if data.startswith("add_to_new_category:"):
        parts = data.split(":")
        if parts[-1] == "no":
            await query.message.reply_text(
                "–ö–∞—Ç–µ–≥–æ—Ä–∏—è —Å–æ–∑–¥–∞–Ω–∞ –±–µ–∑ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–µ–º! üò∫",
                reply_markup=MAIN_KEYBOARD
            )
            context.user_data.pop("new_category_id", None)
            context.user_data["state"] = None
            await query.answer()
            return
        elif parts[-1] == "yes":
            category_id = int(parts[1])
            topics = db.get_active_topics(user_id, user.timezone, category_id='all')
            if not topics:
                await query.message.reply_text(
                    "–£ —Ç–µ–±—è –Ω–µ—Ç —Ç–µ–º –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è! üòø",
                    reply_markup=MAIN_KEYBOARD
                )
                context.user_data["state"] = None
                await query.answer()
                return
            keyboard = [
                [InlineKeyboardButton(topic.topic_name, callback_data=f"add_to_category_topic:{topic.topic_id}")]
                for topic in topics
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.message.reply_text(
                "–í—ã–±–µ—Ä–∏ —Ç–µ–º—É –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=reply_markup
            )
            context.user_data["move_to_category_id"] = category_id
            context.user_data["state"] = "awaiting_topic_add_to_category"
            await query.answer()
            return

    if data.startswith("add_to_category_topic:"):
        topic_id = int(data.split(":", 1)[1])
        category_id = context.user_data.get("move_to_category_id")
        if db.move_topic_to_category(topic_id, user_id, category_id):
            category_name = db.get_category(category_id, user_id).category_name
            await query.message.reply_text(
                f"–¢–µ–º–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—é '{category_name}'! üò∫",
                reply_markup=MAIN_KEYBOARD
            )
            logger.debug(f"User {user_id} added topic {topic_id} to category {category_id}")
        else:
            await query.message.reply_text(
                "–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–µ–º—ã. üòø",
                reply_markup=MAIN_KEYBOARD
            )
        context.user_data["state"] = None
        context.user_data.pop("move_to_category_id", None)
        await query.answer()
        return

    if data.startswith("repeated:"):
        reminder_id = int(data.split(":", 1)[1])

        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –≤–æ–æ–±—â–µ —Ç–∞–∫–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
        reminder = db.get_reminder(reminder_id)
        if not reminder:
            await query.answer("–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –í–æ–∑–º–æ–∂–Ω–æ, —Ç–µ–º–∞ –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞. üòø")
            await query.message.delete()
            return

        topic = db.get_topic_by_reminder_id(reminder_id, user_id, user.timezone)
        if not topic:
            await query.answer("–¢–µ–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω–∞ –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞. üòø")
            await query.message.delete()
            return

        topic_name = topic.topic_name
        result = db.mark_topic_repeated_by_reminder(reminder_id, user_id, user.timezone)
        if not result:
            await query.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ—Ç–∫–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è. üòî")
            return
        completed_repetitions, next_reminder_time, new_reminder_id = result
        total_repetitions = 7
        progress_percentage = (completed_repetitions / total_repetitions) * 100
        progress_bar = "‚ñà" * int(completed_repetitions) + "‚ñë" * (total_repetitions - completed_repetitions)
        tz = pytz.timezone(user.timezone)
        message = ""
        if completed_repetitions < total_repetitions:
            next_reminder_str = db._from_utc_naive(next_reminder_time, user.timezone).strftime("%d.%m.%Y %H:%M")
            if new_reminder_id:
                scheduler.add_job(
                    send_reminder,
                    "date",
                    run_date=db._from_utc_naive(next_reminder_time, user.timezone),
                    args=[app.bot, user_id, topic_name, new_reminder_id],
                    id=f"reminder_{new_reminder_id}_{user_id}",
                    timezone=tz,
                    misfire_grace_time=None
                )
            message = (
                f"–¢–µ–º–∞ '{topic_name}' –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –ø–æ–≤—Ç–æ—Ä—ë–Ω–Ω–∞—è! üò∫\n"
                f"–ó–∞–≤–µ—Ä—à–µ–Ω–æ: {completed_repetitions}/{total_repetitions} –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π\n"
                f"–°–ª–µ–¥—É—é—â–µ–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ: {next_reminder_str}\n"
                f"–ü—Ä–æ–≥—Ä–µ—Å—Å: {progress_bar} {progress_percentage:.1f}%"
            )
        else:
            message = (
                f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è—é, —Ç—ã –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—Å–≤–æ–∏–ª —Ç–µ–º—É '{topic_name}'! üèÜ\n"
                f"–ó–∞–≤–µ—Ä—à–µ–Ω–æ: {completed_repetitions}/{total_repetitions} –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π\n"
                f"–ü—Ä–æ–≥—Ä–µ—Å—Å: {progress_bar} {progress_percentage:.1f}%\n"
                f"–ï—Å–ª–∏ –∑–∞—Ö–æ—á–µ—à—å –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –µ—ë –∑–∞–Ω–æ–≤–æ, –∏—Å–ø–æ–ª—å–∑—É–π '–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–µ–º—É'. üò∫"
            )
        await query.message.delete()
        await query.message.reply_text(
            message,
            reply_markup=MAIN_KEYBOARD
        )
        await query.answer()
        logger.debug(f"User {user_id} marked topic '{topic_name}' as repeated via button")
        return

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    text = update.message.text.strip()
    user = db.get_user(user_id)
    if not user and not text.startswith("/tz"):
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å —Å –ø–æ–º–æ—â—å—é /tz.",
            reply_markup=ReplyKeyboardMarkup([["/tz"]], resize_keyboard=True)
        )
        return

    state = context.user_data.get("state")

    if state == "awaiting_timezone" or state == "awaiting_manual_timezone":
        timezone = parse_utc_offset(text)
        if timezone:
            try:
                pytz.timezone(timezone)
                db.save_user(user_id, update.effective_user.username or "", timezone)
                schedule_daily_check(user_id, timezone)
                await update.message.reply_text(
                    f"–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å {timezone} —Å–æ—Ö—Ä–∞–Ω–µ–Ω! üò∫",
                    reply_markup=MAIN_KEYBOARD
                )
                context.user_data["state"] = None
                return
            except Exception as e:
                logger.error(f"Error validating timezone {timezone}: {str(e)}")
        try:
            pytz.timezone(text)
            db.save_user(user_id, update.effective_user.username or "", text)
            schedule_daily_check(user_id, text)
            await update.message.reply_text(
                f"–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å {text} —Å–æ—Ö—Ä–∞–Ω–µ–Ω! üò∫",
                reply_markup=MAIN_KEYBOARD
            )
            context.user_data["state"] = None
            return
        except Exception as e:
            logger.error(f"Error validating timezone {text}: {str(e)}")
            await update.message.reply_text(
                "–û–π, —á—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫ —Å —á–∞—Å–æ–≤—ã–º –ø–æ—è—Å–æ–º. üòî –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞!",
                reply_markup=MAIN_KEYBOARD
            )
        return

    if state == "awaiting_category_name":
        if text == "–û—Ç–º–µ–Ω–∞":
            context.user_data["state"] = None
            await update.message.reply_text(
                "–°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ! üò∫",
                reply_markup=MAIN_KEYBOARD
            )
            return
        try:
            category_id = db.add_category(user_id, text)
            keyboard = [
                [InlineKeyboardButton("–î–∞", callback_data=f"add_to_new_category:{category_id}:yes")],
                [InlineKeyboardButton("–ù–µ—Ç", callback_data="add_to_new_category:no")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await update.message.reply_text(
                f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è '{text}' —Å–æ–∑–¥–∞–Ω–∞! üò∫ –î–æ–±–∞–≤–∏—Ç—å –≤ –Ω–µ—ë —Ç–µ–º—ã?",
                reply_markup=reply_markup
            )
            context.user_data["new_category_id"] = category_id
            context.user_data["state"] = "awaiting_add_to_category"
        except Exception as e:
            logger.error(f"Error creating category '{text}' for user {user_id}: {e}")
            await update.message.reply_text(
                "–û–π, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏. üòî –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞!",
                reply_markup=MAIN_KEYBOARD
            )
        return

    if state == "awaiting_new_category_name":
        if text == "–û—Ç–º–µ–Ω–∞":
            context.user_data["state"] = None
            await update.message.reply_text(
                "–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ! üò∫",
                reply_markup=MAIN_KEYBOARD
            )
            return
        category_id = context.user_data.get("rename_category_id")
        try:
            category = db.get_category(category_id, user_id)
            if category and db.rename_category(category_id, user_id, text):
                await update.message.reply_text(
                    f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è '{category.category_name}' –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∞ –≤ '{text}'! üò∫",
                    reply_markup=MAIN_KEYBOARD
                )
                context.user_data["state"] = None
                context.user_data.pop("rename_category_id", None)
            else:
                await update.message.reply_text(
                    "–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. üòø –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞!", reply_markup=MAIN_KEYBOARD
                )
        except Exception as e:
            logger.error(f"Error renaming category {category_id} for user {user_id}: {e}")
            await update.message.reply_text(
                "–û–π, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø—Ä–∏ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏. üòî –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞!",
                reply_markup=MAIN_KEYBOARD
            )
        context.user_data["state"] = None
        return

    if state in ["awaiting_category_action", "awaiting_topic_selection_move", "awaiting_category_selection", "awaiting_add_to_category", "awaiting_topic_add_to_category"]:
        context.user_data["state"] = None
        context.user_data.clear()
        await update.message.reply_text(
            "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ! üò∫",
            reply_markup=MAIN_KEYBOARD
        )
        logger.debug(f"User {user_id} exited state {state} due to new command")
        return

    if text.startswith("–ü–æ–≤—Ç–æ—Ä–∏–ª "):
        topic_name = text[len("–ü–æ–≤—Ç–æ—Ä–∏–ª "):].strip()
        try:
            result = db.mark_topic_repeated(user_id, topic_name, user.timezone)
            if not result:
                await update.message.reply_text(
                    f"–¢–µ–º–∞ '{topic_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. üòø –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞!",
                    reply_markup=MAIN_KEYBOARD
                )
                return
            topic_id, completed_repetitions, next_reminder_time, reminder_id = result
            topic = db.get_topic(topic_id, user_id, user.timezone)
            total_repetitions = 7
            progress_percentage = (completed_repetitions / total_repetitions) * 100
            progress_bar = "‚ñà" * int(completed_repetitions) + "‚ñë" * (total_repetitions - completed_repetitions)
            tz = pytz.timezone(user.timezone)
            if completed_repetitions < total_repetitions:
                next_reminder_str = db._from_utc_naive(next_reminder_time, user.timezone).strftime("%d.%m.%Y %H:%M")
                if reminder_id:
                    scheduler.add_job(
                        send_reminder,
                        "date",
                        run_date=db._from_utc_naive(next_reminder_time, user.timezone),
                        args=[app.bot, user_id, topic_name, reminder_id],
                        id=f"reminder_{reminder_id}_{user_id}",
                        timezone=tz,
                        misfire_grace_time=None
                    )
                await update.message.reply_text(
                    f"–¢–µ–º–∞ '{topic_name}' –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –ø–æ–≤—Ç–æ—Ä—ë–Ω–Ω–∞—è! üò∫\n"
                    f"–ó–∞–≤–µ—Ä—à–µ–Ω–æ: {completed_repetitions}/{total_repetitions} –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π\n"
                    f"–°–ª–µ–¥—É—é—â–µ–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ: {next_reminder_str}\n"
                    f"–ü—Ä–æ–≥—Ä–µ—Å—Å: {progress_bar} {progress_percentage:.1f}%",
                    reply_markup=MAIN_KEYBOARD
                )
            else:
                await update.message.reply_text(
                    f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è—é, —Ç—ã –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—Å–≤–æ–∏–ª —Ç–µ–º—É '{topic_name}'! üèÜ\n"
                    f"–ó–∞–≤–µ—Ä—à–µ–Ω–æ: {completed_repetitions}/{total_repetitions} –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π\n"
                    f"–ü—Ä–æ–≥—Ä–µ—Å—Å: {progress_bar} {progress_percentage:.1f}%\n"
                    f"–ï—Å–ª–∏ –∑–∞—Ö–æ—á–µ—à—å –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –µ—ë –∑–∞–Ω–æ–≤–æ, –∏—Å–ø–æ–ª—å–∑—É–π '–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–µ–º—É'. üò∫",
                    reply_markup=MAIN_KEYBOARD
                )
        except Exception as e:
            logger.error(f"Error marking topic '{topic_name}' as repeated for user {user_id}: {str(e)}")
            await update.message.reply_text(
                "–û–π, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø—Ä–∏ –æ—Ç–º–µ—Ç–∫–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è. üòî –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞!",
                reply_markup=MAIN_KEYBOARD
            )
        return

    if text == "–ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å":
        await show_progress(update, context)
        return

    if text == "–î–æ–±–∞–≤–∏—Ç—å —Ç–µ–º—É":
        context.user_data["state"] = "awaiting_topic_name"
        await update.message.reply_text(
            "–ù–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–º—ã, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—á–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å! üòä",
            reply_markup=ReplyKeyboardMarkup([["–û—Ç–º–µ–Ω–∞"]], resize_keyboard=True)
        )
        return

    if text == "–£–¥–∞–ª–∏—Ç—å —Ç–µ–º—É":
        categories = db.get_categories(user_id)
        if not categories and not db.get_active_topics(user_id, user.timezone, category_id=None):
            await update.message.reply_text(
                "–£ —Ç–µ–±—è –Ω–µ—Ç —Ç–µ–º –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è! üòø",
                reply_markup=MAIN_KEYBOARD
            )
            return

        keyboard = []
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        for category in categories:
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–µ–º –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            topics_in_category = db.get_active_topics(user_id, user.timezone, category.category_id)
            if topics_in_category:
                keyboard.append([
                    InlineKeyboardButton(
                        f"{category.category_name} ({len(topics_in_category)})",
                        callback_data=f"delete_category_select:{category.category_id}"
                    )
                ])

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è —Ç–µ–º –±–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        topics_no_category = db.get_active_topics(user_id, user.timezone, category_id=None)
        if topics_no_category:
            keyboard.append([
                InlineKeyboardButton(
                    f"üìÅ –ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ({len(topics_no_category)})",
                    callback_data="delete_category_select:none"
                )
            ])

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–í—Å–µ —Ç–µ–º—ã" (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
        keyboard.append([
            InlineKeyboardButton("üîç –í—Å–µ —Ç–µ–º—ã —Å—Ä–∞–∑—É", callback_data="delete_all_topics")
        ])

        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ç–µ–º:",
            reply_markup=reply_markup
        )
        context.user_data["state"] = "awaiting_delete_category"
        return

    if text == "–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–µ–º—É":
        completed_topics = db.get_completed_topics(user_id)
        if not completed_topics:
            await update.message.reply_text(
                "–£ —Ç–µ–±—è –Ω–µ—Ç –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö —Ç–µ–º –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è! üò∫",
                reply_markup=MAIN_KEYBOARD
            )
            return

        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ —Ç–µ–º—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        categories_dict = {}
        no_category_topics = []

        for topic in completed_topics:
            if topic.category_id:
                if topic.category_id not in categories_dict:
                    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                    category = db.get_category(topic.category_id, user_id)
                    if category:
                        categories_dict[topic.category_id] = {
                            'name': category.category_name,
                            'topics': []
                        }
                categories_dict[topic.category_id]['topics'].append(topic)
            else:
                no_category_topics.append(topic)

        keyboard = []

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        for category_id, category_data in categories_dict.items():
            if category_data['topics']:
                keyboard.append([
                    InlineKeyboardButton(
                        f"{category_data['name']} ({len(category_data['topics'])})",
                        callback_data=f"restore_category_select:{category_id}"
                    )
                ])

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è —Ç–µ–º –±–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        if no_category_topics:
            keyboard.append([
                InlineKeyboardButton(
                    f"üìÅ –ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ({len(no_category_topics)})",
                    callback_data="restore_category_select:none"
                )
            ])

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–í—Å–µ —Ç–µ–º—ã"
        keyboard.append([
            InlineKeyboardButton("üîç –í—Å–µ —Ç–µ–º—ã —Å—Ä–∞–∑—É", callback_data="restore_all_topics")
        ])

        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–µ–º:",
            reply_markup=reply_markup
        )
        context.user_data["state"] = "awaiting_restore_category"
        return

    if text == "–ö–∞—Ç–µ–≥–æ—Ä–∏–∏":
        keyboard = [
            [
                InlineKeyboardButton("–°–æ–∑–¥–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é", callback_data="category_action:create"),
                InlineKeyboardButton("–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é", callback_data="category_action:rename"),
            ],
            [
                InlineKeyboardButton("–ü–µ—Ä–µ–Ω–µ—Å—Ç–∏ —Ç–µ–º—É", callback_data="category_action:move"),
                InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é", callback_data="category_action:delete"),
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏:", reply_markup=reply_markup
        )
        context.user_data["state"] = "awaiting_category_action"
        return

    if text == "–û—Ç–º–µ–Ω–∞":
        context.user_data["state"] = None
        context.user_data.clear()
        await update.message.reply_text(
            "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ! üò∫",
            reply_markup=MAIN_KEYBOARD
        )
        return

    if state == "awaiting_topic_name":
        if text == "–û—Ç–º–µ–Ω–∞":
            context.user_data["state"] = None
            context.user_data.clear()
            await update.message.reply_text(
                "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ! üò∫",
                reply_markup=MAIN_KEYBOARD
            )
            return
        context.user_data["new_topic_name"] = text
        categories = db.get_categories(user_id)
        keyboard = [
            [InlineKeyboardButton(category.category_name, callback_data=f"add_topic_category:{category.category_id}")]
            for category in categories
        ]
        keyboard.append([InlineKeyboardButton("–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏", callback_data="add_topic_category:none")])
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —Ç–µ–º—ã:", reply_markup=reply_markup
        )
        context.user_data["state"] = "awaiting_topic_category"
        return

    await update.message.reply_text(
        "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. üòø",
        reply_markup=MAIN_KEYBOARD
    )

async def send_reminder(bot, user_id: int, topic_name: str, reminder_id: int):
    try:
        keyboard = [[InlineKeyboardButton("–ü–æ–≤—Ç–æ—Ä–∏–ª!", callback_data=f"repeated:{reminder_id}")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await bot.send_message(
            chat_id=user_id,
            text=f"‚è∞ –ü–æ—Ä–∞ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å —Ç–µ–º—É '{topic_name}'! üò∫",
            reply_markup=reply_markup
        )
        logger.debug(f"Sent reminder {reminder_id} for topic '{topic_name}' to user {user_id}")
    except Exception as e:
        logger.error(f"Error sending reminder {reminder_id} to user {user_id}: {str(e)}")

async def check_overdue_for_user(app: Application, user_id: int):
    user = db.get_user(user_id)
    if not user:
        return
    tz = pytz.timezone(user.timezone)
    now_utc = datetime.utcnow()
    now_local = pytz.utc.localize(now_utc).astimezone(tz)
    topics = db.get_active_topics(user_id, user.timezone, 'all')
    for topic in topics:
        if topic.next_review is None or topic.is_completed:
            continue
        next_review_utc = topic.next_review  # utc naive
        next_review_local = db._from_utc_naive(next_review_utc, user.timezone)
        if next_review_local < now_local:
            # Create temporary reminder for button
            reminder_id = db.add_reminder(user_id, topic.topic_id, now_utc)
            keyboard = [[InlineKeyboardButton("–ü–æ–≤—Ç–æ—Ä–∏–ª!", callback_data=f"repeated:{reminder_id}")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await app.bot.send_message(
                chat_id=user_id,
                text=f"‚è∞ –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ! –ü–æ—Ä–∞ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å —Ç–µ–º—É '{topic.topic_name}'! üò∫",
                reply_markup=reply_markup
            )
            logger.debug(f"Sent overdue reminder for topic '{topic.topic_name}' to user {user_id}")

def schedule_daily_check(user_id: int, timezone: str):
    job_id = f"daily_check_{user_id}"
    if scheduler.get_job(job_id):
        scheduler.remove_job(job_id)
    scheduler.add_job(
        check_overdue_for_user,
        'cron',
        hour=9,
        minute=0,
        timezone=timezone,
        args=[app, user_id],  # app will be defined in main
        id=job_id
    )
    logger.debug(f"Scheduled daily check for user {user_id} at 9:00 {timezone}")

async def init_scheduler(app: Application):
    users = db.get_all_users()
    for user in users:
        reminders = db.get_reminders(user.user_id)
        tz = pytz.timezone(user.timezone)
        for reminder in reminders:
            topic = db.get_topic_by_reminder_id(reminder.reminder_id, user.user_id, user.timezone)
            if topic:
                run_date = db._from_utc_naive(reminder.scheduled_time, user.timezone)
                if run_date > datetime.now(tz):
                    scheduler.add_job(
                        send_reminder,
                        "date",
                        run_date=run_date,
                        args=[app.bot, user.user_id, topic.topic_name, reminder.reminder_id],
                        id=f"reminder_{reminder.reminder_id}_{user.user_id}",
                        timezone=tz,
                        misfire_grace_time=None
                    )
                    logger.debug(
                        f"Scheduled reminder {reminder.reminder_id} for topic '{topic.topic_name}' "
                        f"for user {user.user_id} at {run_date.isoformat()}"
                    )
        schedule_daily_check(user.user_id, user.timezone)
        await check_overdue_for_user(app, user.user_id)  # Check overdue at startup

async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.error(f"Update {update} caused error {context.error}")
    text = "–û–π, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫! üòø –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π /reset."
    if update and update.effective_message:
        await update.effective_message.reply_text(
            text,
            reply_markup=MAIN_KEYBOARD
        )


async def keep_awake():
    domain = os.getenv("RENDER_EXTERNAL_HOSTNAME")
    if not domain:
        logger.warning("RENDER_EXTERNAL_HOSTNAME not set, keep-awake disabled")
        return

    url = f"https://{domain}/health"
    async with aiohttp.ClientSession() as session:
        while True:
            try:
                async with session.get(url, timeout=10) as resp:
                    logger.debug(f"Keep-awake ping: {resp.status}")
            except Exception as e:
                logger.error(f"Keep-awake error: {e}")
            await asyncio.sleep(300)  # 5 –º–∏–Ω—É—Ç –≤–º–µ—Å—Ç–æ 10


async def main():
    global app

    # –£–º–µ–Ω—å—à–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫
    logging.getLogger("httpcore").setLevel(logging.WARNING)
    logging.getLogger("httpx").setLevel(logging.WARNING)
    logging.getLogger("sqlalchemy.engine").setLevel(logging.WARNING)
    logging.getLogger("apscheduler").setLevel(logging.WARNING)

    logger.info("Starting bot initialization...")

    try:
        app = Application.builder().token(BOT_TOKEN).build()
        logger.info("Bot application created successfully")
    except InvalidToken:
        logger.error("Invalid bot token provided")
        raise
    except Exception as e:
        logger.error(f"Failed to create bot application: {e}")
        raise

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("tz", handle_timezone))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(CommandHandler("reset", reset))
    app.add_handler(CallbackQueryHandler(handle_callback_query))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    app.add_error_handler(error_handler)

    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
    try:
        scheduler.start()
        logger.info("Scheduler started successfully")
    except Exception as e:
        logger.error(f"Failed to start scheduler: {e}")
        raise

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏
    try:
        await init_scheduler(app)
        logger.info("Scheduler initialized with existing reminders")
    except Exception as e:
        logger.error(f"Failed to initialize scheduler: {e}")
        # –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π

    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º web server –¥–ª—è health checks
    try:
        web_app = web.Application()
        web_app.add_routes([web.get('/health', health_check)])
        runner = web.AppRunner(web_app)
        await runner.setup()
        site = web.TCPSite(runner, "0.0.0.0", int(os.getenv("PORT", 8080)))
        await site.start()
        logger.info(f"Web server started on port {os.getenv('PORT', 8080)}")
    except Exception as e:
        logger.error(f"Failed to start web server: {e}")
        # –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, –±–æ—Ç –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –±–µ–∑ web —Å–µ—Ä–≤–µ—Ä–∞

    # –ó–∞–ø—É—Å–∫–∞–µ–º keep-awake –∑–∞–¥–∞—á—É (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –¥–æ–º–µ–Ω)
    keep_awake_task = None
    if os.getenv("RENDER_EXTERNAL_HOSTNAME"):
        keep_awake_task = asyncio.create_task(keep_awake())
        logger.info("Keep-awake task started")
    else:
        logger.warning("RENDER_EXTERNAL_HOSTNAME not set, keep-awake disabled")

    # Graceful shutdown handlers
    shutdown_event = asyncio.Event()

    async def shutdown():
        logger.info("Starting graceful shutdown...")

        # –û—Ç–º–µ–Ω—è–µ–º keep-awake –∑–∞–¥–∞—á—É
        if keep_awake_task and not keep_awake_task.done():
            keep_awake_task.cancel()
            try:
                await keep_awake_task
            except asyncio.CancelledError:
                logger.info("Keep-awake task cancelled")

        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–æ—Ç–∞
        try:
            await app.updater.stop()
            await app.stop()
            logger.info("Bot stopped successfully")
        except Exception as e:
            logger.error(f"Error stopping bot: {e}")

        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
        try:
            scheduler.shutdown()
            logger.info("Scheduler shutdown complete")
        except Exception as e:
            logger.error(f"Error shutting down scheduler: {e}")

        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º web server
        try:
            await runner.cleanup()
            logger.info("Web server stopped successfully")
        except Exception as e:
            logger.error(f"Error stopping web server: {e}")

        logger.info("Shutdown complete")
        shutdown_event.set()

    def signal_handler(signum, frame):
        logger.info(f"Received signal {signum}, initiating shutdown...")
        asyncio.create_task(shutdown())

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
    signal.signal(signal.SIGTERM, signal_handler)
    signal.signal(signal.SIGINT, signal_handler)

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    try:
        await app.initialize()
        await app.start()
        await app.updater.start_polling()
        logger.info("Bot polling started successfully")

        # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª - –ø—Ä–æ—Å—Ç–æ –∂–¥–µ–º —Å–æ–±—ã—Ç–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        logger.info("Bot is now running and waiting for messages...")
        await shutdown_event.wait()

    except Exception as e:
        logger.error(f"Failed to start bot: {e}")
        await shutdown()
        raise

    finally:
        # –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º cleanup –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö
        if not shutdown_event.is_set():
            await shutdown()


if __name__ == "__main__":
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è asyncio –∏—Å–∫–ª—é—á–µ–Ω–∏–π
    def handle_exception(loop, context):
        logger.error(f"AsyncIO exception: {context}")


    loop = asyncio.new_event_loop()
    asyncio.set_event_loop(loop)
    loop.set_exception_handler(handle_exception)

    try:
        loop.run_until_complete(main())
    except KeyboardInterrupt:
        logger.info("Keyboard interrupt received")
    except Exception as e:
        logger.error(f"Main loop error: {e}")
    finally:
        loop.close()
        logger.info("Event loop closed")