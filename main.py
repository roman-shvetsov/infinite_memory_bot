import logging
import os
import re
from typing import Optional
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    ContextTypes,
    filters,
)
from telegram.error import InvalidToken
from datetime import datetime, timedelta
import pytz
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from db import Database
import asyncio
from aiohttp import web
from dotenv import load_dotenv
import tenacity

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.DEBUG
)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞
BOT_TOKEN = os.getenv("BOT_TOKEN")
if not BOT_TOKEN:
    logger.error("BOT_TOKEN environment variable is not set")
    raise ValueError("BOT_TOKEN environment variable is not set")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
db = Database()
scheduler = AsyncIOScheduler(timezone="UTC")

# –û—Å–Ω–æ–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
MAIN_KEYBOARD = ReplyKeyboardMarkup(
    [["–ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å", "–î–æ–±–∞–≤–∏—Ç—å —Ç–µ–º—É"], ["–£–¥–∞–ª–∏—Ç—å —Ç–µ–º—É", "–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–µ–º—É"], ["–ö–∞—Ç–µ–≥–æ—Ä–∏–∏"]],
    resize_keyboard=True
)

def parse_utc_offset(text: str) -> str:
    """
    –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç UTC-—Å–º–µ—â–µ–Ω–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'UTC+8', '+8', '-6') –≤ —Ñ–æ—Ä–º–∞—Ç —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'Etc/GMT-8').
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç None, –µ—Å–ª–∏ —Ñ–æ—Ä–º–∞—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π –∏–ª–∏ —Å–º–µ—â–µ–Ω–∏–µ –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ [-12, +14].
    """
    text = text.strip().replace(" ", "").upper()
    text = text.replace("UTC", "")
    match = re.match(r'^([+-]?)(\d{1,2})$', text)
    if not match:
        return None
    sign, offset = match.groups()
    try:
        offset = int(sign + offset)
        if not -12 <= offset <= 14:
            return None
        return f"Etc/GMT{'+' if offset < 0 else '-'}{abs(offset)}"
    except ValueError:
        return None

async def health_check(request):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ GET –∏ HEAD –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è /health.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç JSON {"status": "ok"} –¥–ª—è GET –∏ –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –¥–ª—è HEAD.
    """
    logger.debug(f"Received {request.method} request to /health")
    if request.method == "HEAD":
        return web.Response(status=200)
    return web.json_response({"status": "ok"})

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.debug(f"Received /start command from user {update.effective_user.id}")
    user = db.get_user(update.effective_user.id)
    if user:
        await update.message.reply_text(
            f"üéâ –ü—Ä–∏–≤–µ—Ç, {update.effective_user.first_name}! üò∫\n"
            f"–¢–≤–æ–π —Ç–µ–∫—É—â–∏–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å: {user.timezone}\n"
            "–•–æ—á–µ—à—å –∏–∑–º–µ–Ω–∏—Ç—å –µ–≥–æ? \n–ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /tz –∏–ª–∏ –Ω–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'Europe/Moscow') –∏–ª–∏ —Å–º–µ—â–µ–Ω–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'UTC+8').\n–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ –±–æ—Ç–µ, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /help",
            reply_markup=MAIN_KEYBOARD
        )
    else:
        await update.message.reply_text(
            "üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è —Ç–µ–º! üìö\n\n"
            "–Ø —Å–æ–∑–¥–∞–Ω, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å —Ç–µ–±–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ –∑–∞–ø–æ–º–∏–Ω–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Å –ø–æ–º–æ—â—å—é –º–µ—Ç–æ–¥–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª—å–Ω–æ–≥–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è (–∫—Ä–∏–≤–æ–π –∑–∞–±—ã–≤–∞–Ω–∏—è). üò∫ "
            "–î–æ–±–∞–≤–ª—è–π —Ç–µ–º—ã, –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—á–µ—à—å –∏–∑—É—á–∏—Ç—å, –∏ —è –Ω–∞–ø–æ–º–Ω—é —Ç–µ–±–µ –æ –Ω–∏—Ö –≤ –Ω—É–∂–Ω–æ–µ –≤—Ä–µ–º—è, —á—Ç–æ–±—ã –∑–Ω–∞–Ω–∏—è –∑–∞–∫—Ä–µ–ø–∏–ª–∏—Å—å –Ω–∞–¥–æ–ª–≥–æ! üöÄ\n\n"
            "–î–ª—è –Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ —Å–≤–æ–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å. –≠—Ç–æ –≤–∞–∂–Ω–æ, —á—Ç–æ–±—ã –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø—Ä–∏—Ö–æ–¥–∏–ª–∏ –≤–æ–≤—Ä–µ–º—è! ‚è∞\n"
            "üìç –û—Ç–ø—Ä–∞–≤—å –Ω–∞–∑–≤–∞–Ω–∏–µ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'Europe/Moscow' –¥–ª—è –ú–æ—Å–∫–≤—ã, UTC+3).\n"
            "üìç –ò–ª–∏ —É–∫–∞–∂–∏ —Å–º–µ—â–µ–Ω–∏–µ –æ—Ç UTC (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'UTC+8' –∏–ª–∏ '+8').\n"
            "üìç –•–æ—á–µ—à—å –≤—ã–±—Ä–∞—Ç—å –∏–∑ —Å–ø–∏—Å–∫–∞? –ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /tz.\n\n"
            "–î–∞–≤–∞–π –Ω–∞—á–Ω–µ–º! üòä –ö–∞–∫–æ–π —É —Ç–µ–±—è —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å?",
            reply_markup=ReplyKeyboardMarkup([["/tz"]], resize_keyboard=True)
        )
    logger.debug(f"Sent start response to user {update.effective_user.id}")

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –±–æ—Ç–∞ –∏ –µ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞."""
    user_id = update.effective_user.id
    logger.debug(f"Received /help command from user {user_id}")

    help_text = (
        "üéâ **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è —Ç–µ–º!** üìö\n\n"
        "–Ø —Å–æ–∑–¥–∞–Ω, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å —Ç–µ–±–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ –∑–∞–ø–æ–º–∏–Ω–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Å –ø–æ–º–æ—â—å—é **–º–µ—Ç–æ–¥–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª—å–Ω–æ–≥–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è** (–∫—Ä–∏–≤–æ–π –∑–∞–±—ã–≤–∞–Ω–∏—è). üò∫ "
        "–î–æ–±–∞–≤–ª—è–π —Ç–µ–º—ã, –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—á–µ—à—å –∏–∑—É—á–∏—Ç—å, –∞ —è –Ω–∞–ø–æ–º–Ω—é –æ –Ω–∏—Ö –≤ –Ω—É–∂–Ω–æ–µ –≤—Ä–µ–º—è, —á—Ç–æ–±—ã –∑–Ω–∞–Ω–∏—è –∑–∞–∫—Ä–µ–ø–∏–ª–∏—Å—å –Ω–∞–¥–æ–ª–≥–æ! üöÄ\n\n"
        "üìñ **–ß—Ç–æ —è —É–º–µ—é?**\n"
        "‚úÖ **–î–æ–±–∞–≤–ª—è—Ç—å —Ç–µ–º—ã**: –°–æ–∑–¥–∞–≤–∞–π —Ç–µ–º—ã –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è –∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è–π –∏—Ö –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º.\n"
        "‚úÖ **–ù–∞–ø–æ–º–∏–Ω–∞—Ç—å –æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–∏**: –Ø –æ—Ç–ø—Ä–∞–≤–ª—é –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ —Ç–≤–æ—ë–º —á–∞—Å–æ–≤–æ–º –ø–æ—è—Å–µ, —á—Ç–æ–±—ã —Ç—ã –ø–æ–≤—Ç–æ—Ä—è–ª —Ç–µ–º—ã –ø–æ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–º—É –≥—Ä–∞—Ñ–∏–∫—É (6 –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π –¥–ª—è –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏—è).\n"
        "‚úÖ **–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å**: –û—Ç—Å–ª–µ–∂–∏–≤–∞–π, —Å–∫–æ–ª—å–∫–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω–æ –¥–ª—è –∫–∞–∂–¥–æ–π —Ç–µ–º—ã, –≤–∫–ª—é—á–∞—è –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ, —Å —É–¥–æ–±–Ω–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–æ–º!\n"
        "‚úÖ **–£–ø—Ä–∞–≤–ª—è—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏**: –°–æ–∑–¥–∞–≤–∞–π, –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–π, —É–¥–∞–ª—è–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–ª–∏ –ø–µ—Ä–µ–º–µ—â–∞–π —Ç–µ–º—ã –º–µ–∂–¥—É –Ω–∏–º–∏.\n"
        "‚úÖ **–£–¥–∞–ª—è—Ç—å —Ç–µ–º—ã**: –£–¥–∞–ª—ë–Ω–Ω—ã–µ —Ç–µ–º—ã –∏—Å—á–µ–∑–∞—é—Ç –Ω–∞–≤—Å–µ–≥–¥–∞, —Ç–∞–∫ —á—Ç–æ –±—É–¥—å –æ—Å—Ç–æ—Ä–æ–∂–µ–Ω!\n"
        "‚úÖ **–í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ —Ç–µ–º—ã**: –ó–∞–≤–µ—Ä—à–∏–ª –≤—Å–µ 6 –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π? –ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –¢—ã –º–æ–∂–µ—à—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–µ–º—É —á–µ—Ä–µ–∑ '–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–µ–º—É', —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.\n"
        "‚úÖ **–ù–∞—Å—Ç—Ä–∞–∏–≤–∞—Ç—å —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å**: –£–∫–∞–∂–∏ —Å–≤–æ–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å, —á—Ç–æ–±—ã –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø—Ä–∏—Ö–æ–¥–∏–ª–∏ –≤–æ–≤—Ä–µ–º—è.\n\n"
        "üõ† **–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è?**\n"
        "üîπ **/start** ‚Äî –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º –∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å.\n"
        "üîπ **/tz** ‚Äî –ò–∑–º–µ–Ω–∏—Ç—å —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'Europe/Moscow' –∏–ª–∏ 'UTC+8').\n"
        "üîπ **/help** ‚Äî –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ.\n"
        "üîπ **/reset** ‚Äî –°–±—Ä–æ—Å–∏—Ç—å —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ (–µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫).\n"
        "üîπ **–ö–Ω–æ–ø–∫–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é**:\n"
        "   - *–ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å*: –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ —Ç–µ–º–∞–º –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º, –≤–∫–ª—é—á–∞—è –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ —Ç–µ–º—ã.\n"
        "   - *–î–æ–±–∞–≤–∏—Ç—å —Ç–µ–º—É*: –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é —Ç–µ–º—É –∏ –≤—ã–±—Ä–∞—Ç—å –¥–ª—è –Ω–µ—ë –∫–∞—Ç–µ–≥–æ—Ä–∏—é.\n"
        "   - *–£–¥–∞–ª–∏—Ç—å —Ç–µ–º—É*: –£–¥–∞–ª–∏—Ç—å —Ç–µ–º—É –Ω–∞–≤—Å–µ–≥–¥–∞ (–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–µ–ª—å–∑—è).\n"
        "   - *–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–µ–º—É*: –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—É—é —Ç–µ–º—É –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∏–∑—É—á–µ–Ω–∏—è.\n"
        "   - *–ö–∞—Ç–µ–≥–æ—Ä–∏–∏*: –°–æ–∑–¥–∞—Ç—å, –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å, —É–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–ª–∏ –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏ —Ç–µ–º—ã.\n"
        "üîπ –ù–∞–ø–∏—à–∏ **'–ü–æ–≤—Ç–æ—Ä–∏–ª <–Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–º—ã>'**, —á—Ç–æ–±—ã –æ—Ç–º–µ—Ç–∏—Ç—å –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ –≤—Ä—É—á–Ω—É—é.\n\n"
        "‚è∞ **–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å**\n"
        "–ß—Ç–æ–±—ã –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø—Ä–∏—Ö–æ–¥–∏–ª–∏ –≤–æ–≤—Ä–µ–º—è, —É–±–µ–¥–∏—Å—å, —á—Ç–æ —Ç–≤–æ–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –Ω–∞—Å—Ç—Ä–æ–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ. "
        "–ò—Å–ø–æ–ª—å–∑—É–π /tz –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, '/tz Europe/Moscow' –∏–ª–∏ '/tz UTC+8').\n\n"
        "–ì–æ—Ç–æ–≤ –Ω–∞—á–∞—Ç—å? üòä –ü–æ–ø—Ä–æ–±—É–π –¥–æ–±–∞–≤–∏—Ç—å –ø–µ—Ä–≤—É—é —Ç–µ–º—É —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É '–î–æ–±–∞–≤–∏—Ç—å —Ç–µ–º—É' –∏–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å —Å –ø–æ–º–æ—â—å—é /tz!"
    )

    await update.message.reply_text(
        help_text,
        reply_markup=MAIN_KEYBOARD,
        parse_mode="Markdown"
    )
    logger.debug(f"Sent help response to user {user_id}")

async def reset(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    context.user_data["state"] = None
    context.user_data.clear()
    await update.message.reply_text(
        "–°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–±—Ä–æ—à–µ–Ω–æ! üò∫",
        reply_markup=MAIN_KEYBOARD
    )
    logger.debug(f"User {user_id} reset state")

async def handle_timezone(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    text = update.message.text.split(maxsplit=1)[1] if len(update.message.text.split()) > 1 else None
    logger.debug(f"User {user_id} sent timezone command: {text}")

    if text == "list":
        await update.message.reply_text(
            "–ü–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ —á–∞—Å–æ–≤—ã—Ö –ø–æ—è—Å–æ–≤: https://en.wikipedia.org/wiki/List_of_tz_database_time_zones\n"
            "–û—Ç–ø—Ä–∞–≤—å –Ω–∞–∑–≤–∞–Ω–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'Europe/Moscow') –∏–ª–∏ —Å–º–µ—â–µ–Ω–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'UTC+8' –∏–ª–∏ '+8').",
            reply_markup=MAIN_KEYBOARD
        )
        return

    if text:
        timezone = parse_utc_offset(text)
        if timezone:
            try:
                pytz.timezone(timezone)
                db.save_user(user_id, update.effective_user.username or "", timezone)
                logger.debug(f"User {user_id} saved with timezone {timezone} (from UTC offset {text})")
                await update.message.reply_text(
                    f"–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å {timezone} (UTC{text}) —Å–æ—Ö—Ä–∞–Ω–µ–Ω! üò∫",
                    reply_markup=MAIN_KEYBOARD
                )
                context.user_data["state"] = None
                return
            except Exception as e:
                logger.error(f"Error validating UTC timezone {timezone}: {str(e)}")
        try:
            pytz.timezone(text)
            db.save_user(user_id, update.effective_user.username or "", text)
            logger.debug(f"User {user_id} saved with timezone {text}")
            await update.message.reply_text(
                f"–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å {text} —Å–æ—Ö—Ä–∞–Ω–µ–Ω! üò∫",
                reply_markup=MAIN_KEYBOARD
            )
            context.user_data["state"] = None
        except Exception as e:
            logger.error(f"Error saving user timezone: {str(e)}")
            await update.message.reply_text(
                "–û–π, —á—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫ —Å —á–∞—Å–æ–≤—ã–º –ø–æ—è—Å–æ–º. üòî –ü–æ–ø—Ä–æ–±—É–π –Ω–∞–∑–≤–∞–Ω–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'Europe/Moscow') –∏–ª–∏ —Å–º–µ—â–µ–Ω–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'UTC+8' –∏–ª–∏ '+8').",
                reply_markup=MAIN_KEYBOARD
            )
        return

    keyboard = [
        [
            InlineKeyboardButton("Europe/Moscow (MSK, UTC+3)", callback_data="tz:Europe/Moscow"),
            InlineKeyboardButton("America/New_York (EST, UTC-5)", callback_data="tz:America/New_York"),
        ],
        [
            InlineKeyboardButton("Europe/London (GMT, UTC+0)", callback_data="tz:Europe/London"),
            InlineKeyboardButton("Asia/Tokyo (JST, UTC+9)", callback_data="tz:Asia/Tokyo"),
        ],
        [InlineKeyboardButton("–î—Ä—É–≥–æ–π (–≤–≤–µ–¥–∏ –≤—Ä—É—á–Ω—É—é)", callback_data="tz:manual")],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏ —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –∏–ª–∏ –≤–≤–µ–¥–∏ –µ–≥–æ –≤—Ä—É—á–Ω—É—é (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'Europe/Moscow' –∏–ª–∏ 'UTC+8'):",
        reply_markup=reply_markup
    )
    context.user_data["state"] = "awaiting_timezone"
    logger.debug(f"User {user_id} prompted to select timezone")

async def show_progress(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user = db.get_user(user_id)
    if not user:
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å —Å –ø–æ–º–æ—â—å—é /start –∏–ª–∏ /tz.",
            reply_markup=ReplyKeyboardMarkup([["/tz"]], resize_keyboard=True)
        )
        return
    categories = db.get_categories(user_id)
    keyboard = [
        [InlineKeyboardButton(category.category_name, callback_data=f"category_progress:{category.category_id}")]
        for category in categories
    ]
    keyboard.append([InlineKeyboardButton("üìÅ –ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏", callback_data="category_progress:none")])
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞:",
        reply_markup=reply_markup
    )
    context.user_data["state"] = "awaiting_category_progress"
    logger.debug(f"User {user_id} requested progress, showing category selection")


async def show_category_progress(update: Update, context: ContextTypes.DEFAULT_TYPE, category_id: Optional[int],
                                 timezone: str):
    user_id = update.effective_user.id
    logger.debug(f"User {user_id} requested progress for category {category_id}")
    topics = db.get_active_topics(user_id, timezone, category_id=category_id)
    total_repetitions = 6
    category_name = db.get_category(category_id, user_id).category_name if category_id else "üìÅ –ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"

    if not topics:
        reply_markup = InlineKeyboardMarkup([[InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_to_progress")]])
        if update.callback_query:
            await update.callback_query.message.reply_text(
                f"–í –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category_name}' –ø–æ–∫–∞ –Ω–µ—Ç —Ç–µ–º! üòø",
                reply_markup=reply_markup
            )
            await update.callback_query.answer()
        else:
            await update.message.reply_text(
                f"–í –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category_name}' –ø–æ–∫–∞ –Ω–µ—Ç —Ç–µ–º! üòø",
                reply_markup=reply_markup
            )
        return

    tz = pytz.timezone(timezone)
    message = f"üìö {category_name} ({timezone}) üò∫\n\n"
    for topic in topics:
        progress_percentage = (topic.completed_repetitions / total_repetitions) * 100
        progress_bar = "‚ñà" * int(topic.completed_repetitions) + "‚ñë" * (total_repetitions - topic.completed_repetitions)
        status = "–ó–∞–≤–µ—Ä—à–µ–Ω–æ" if topic.is_completed else f"{topic.next_review.astimezone(tz).strftime('%d.%m.%Y %H:%M')}" if topic.next_review else "–ó–∞–≤–µ—Ä—à–µ–Ω–æ"
        message += (
            f"üìñ {topic.topic_name}\n"
            f"‚è∞ –°–ª–µ–¥—É—é—â–µ–µ: {status}\n"
            f"‚úÖ –ü—Ä–æ–≥—Ä–µ—Å—Å: {progress_bar} {topic.completed_repetitions}/{total_repetitions} ({progress_percentage:.1f}%)\n"
            f"‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
        )

    reply_markup = InlineKeyboardMarkup([[InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_to_progress")]])
    try:
        if update.callback_query:
            await update.callback_query.message.reply_text(
                message,
                reply_markup=reply_markup
            )
            await update.callback_query.answer()
        else:
            await update.message.reply_text(
                message,
                reply_markup=reply_markup
            )
    except Exception as e:
        logger.error(f"Error sending category progress for user {user_id}, category {category_id}: {str(e)}")
        error_message = "–û–π, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞! üòø –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π /reset."
        if update.callback_query:
            await update.callback_query.message.reply_text(
                error_message,
                reply_markup=MAIN_KEYBOARD
            )
            await update.callback_query.answer()
        else:
            await update.message.reply_text(
                error_message,
                reply_markup=MAIN_KEYBOARD
            )

async def send_reminder(context: ContextTypes.DEFAULT_TYPE, user_id: int, topic_name: str, reminder_id: int):
    user = db.get_user(user_id)
    if not user:
        logger.warning(f"User {user_id} not found for reminder {reminder_id}")
        return
    try:
        topic = db.get_topic_by_reminder_id(reminder_id, user_id, user.timezone)
        if not topic:
            logger.warning(f"Topic for reminder {reminder_id} not found for user {user_id}")
            return
        keyboard = [[InlineKeyboardButton("–ü–æ–≤—Ç–æ—Ä–∏–ª!", callback_data=f"repeated:{reminder_id}")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await context.bot.send_message(
            chat_id=user_id,
            text=f"‚è∞ –ü–æ—Ä–∞ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å —Ç–µ–º—É '{topic_name}'! üò∫",
            reply_markup=reply_markup
        )
        logger.debug(f"Sent reminder {reminder_id} for topic '{topic_name}' to user {user_id}")
    except Exception as e:
        logger.error(f"Error sending reminder {reminder_id} to user {user_id}: {str(e)}")

async def handle_callback_query(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    query = update.callback_query
    data = query.data
    logger.debug(f"User {user_id} selected callback: {data}")

    if data.startswith("tz:"):
        timezone = data.split("tz:")[1]
        if timezone == "manual":
            await query.message.reply_text(
                "–û—Ç–ø—Ä–∞–≤—å –Ω–∞–∑–≤–∞–Ω–∏–µ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'Europe/Moscow') –∏–ª–∏ —Å–º–µ—â–µ–Ω–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'UTC+8' –∏–ª–∏ '+8'):",
                reply_markup=MAIN_KEYBOARD
            )
            context.user_data["state"] = "awaiting_timezone"
        else:
            try:
                pytz.timezone(timezone)
                db.save_user(user_id, update.effective_user.username or "", timezone)
                logger.debug(f"User {user_id} saved with timezone {timezone}")
                await query.message.reply_text(
                    f"–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å {timezone} —Å–æ—Ö—Ä–∞–Ω–µ–Ω! üò∫",
                    reply_markup=MAIN_KEYBOARD
                )
                context.user_data["state"] = None
            except Exception as e:
                logger.error(f"Error saving user timezone: {str(e)}")
                await query.message.reply_text(
                    "–û–π, —á—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫ —Å —á–∞—Å–æ–≤—ã–º –ø–æ—è—Å–æ–º. üòî –ü–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥–æ–π —Å –ø–æ–º–æ—â—å—é /tz.",
                    reply_markup=MAIN_KEYBOARD
                )
    elif data.startswith("delete:"):
        topic_id = int(data.split("delete:")[1])
        user = db.get_user(user_id)
        if not user:
            await query.message.reply_text(
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å —Å –ø–æ–º–æ—â—å—é /start –∏–ª–∏ /tz.",
                reply_markup=ReplyKeyboardMarkup([["/tz"]], resize_keyboard=True)
            )
            await query.answer()
            return
        topic = db.get_topic(topic_id, user_id, user.timezone)
        if topic:
            try:
                reminders = db.get_reminders(user_id, user.timezone)
                for reminder in reminders:
                    if reminder.topic_id == topic_id:
                        try:
                            scheduler.remove_job(f"reminder_{reminder.reminder_id}_{user_id}")
                            logger.debug(
                                f"Removed scheduled job reminder_{reminder.reminder_id}_{user_id} for topic {topic_id}"
                            )
                        except Exception as e:
                            logger.warning(f"Could not remove job reminder_{reminder.reminder_id}_{user_id}: {e}")
                db.delete_topic(topic_id, user_id)
                await query.message.reply_text(
                    f"–¢–µ–º–∞ '{topic.topic_name}' —É–¥–∞–ª–µ–Ω–∞ –Ω–∞–≤—Å–µ–≥–¥–∞! üò∫",
                    reply_markup=MAIN_KEYBOARD
                )
                await query.message.edit_reply_markup(reply_markup=None)
                context.user_data["state"] = None
                logger.debug(f"User {user_id} permanently deleted topic {topic_id}, keyboard removed")
            except Exception as e:
                logger.error(f"Error deleting topic {topic_id} for user {user_id}: {e}")
                await query.message.reply_text(
                    "–û–π, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–µ–º—ã. üòî –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞!",
                    reply_markup=MAIN_KEYBOARD
                )
        else:
            await query.message.reply_text(
                "–¢–µ–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. üòø –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞ —Å –ø–æ–º–æ—â—å—é '–£–¥–∞–ª–∏—Ç—å —Ç–µ–º—É'.",
                reply_markup=MAIN_KEYBOARD
            )
            context.user_data["state"] = None
    elif data.startswith("restore:"):
        completed_topic_id = int(data.split("restore:")[1])
        user = db.get_user(user_id)
        if not user:
            await query.message.reply_text(
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å —Å –ø–æ–º–æ—â—å—é /start –∏–ª–∏ /tz.",
                reply_markup=ReplyKeyboardMarkup([["/tz"]], resize_keyboard=True)
            )
            await query.answer()
            return
        try:
            result = db.restore_topic(completed_topic_id, user_id, user.timezone)
            if result:
                topic_id, topic_name = result
                tz = pytz.timezone(user.timezone)
                now = datetime.now(tz).astimezone(tz)
                reminders = db.get_reminders(user_id, user.timezone)
                reminder = next((r for r in reminders if r.topic_id == topic_id), None)
                if reminder:
                    scheduler.add_job(
                        send_reminder,
                        "date",
                        run_date=reminder.scheduled_time.astimezone(tz),
                        args=[context, user_id, topic_name, reminder.reminder_id],
                        id=f"reminder_{reminder.reminder_id}_{user_id}",
                        timezone=tz
                    )
                    logger.debug(
                        f"Scheduled reminder {reminder.reminder_id} for restored topic '{topic_name}' at {reminder.scheduled_time.isoformat()}"
                    )
                await query.message.reply_text(
                    f"–¢–µ–º–∞ '{topic_name}' –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞! üò∫ –ü–µ—Ä–≤–æ–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 1 —á–∞—Å.",
                    reply_markup=MAIN_KEYBOARD
                )
                completed_topics = db.get_completed_topics(user_id)
                if completed_topics:
                    keyboard = [
                        [InlineKeyboardButton(topic.topic_name, callback_data=f"restore:{topic.completed_topic_id}")]
                        for topic in completed_topics
                    ]
                    reply_markup = InlineKeyboardMarkup(keyboard)
                    await query.message.edit_reply_markup(reply_markup=reply_markup)
                    logger.debug(f"Updated keyboard for user {user_id} after restoring topic {topic_id}")
                else:
                    await query.message.edit_reply_markup(reply_markup=None)
                    await query.message.reply_text(
                        "–£ —Ç–µ–±—è –±–æ–ª—å—à–µ –Ω–µ—Ç –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö —Ç–µ–º –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è! üò∫",
                        reply_markup=MAIN_KEYBOARD
                    )
                    logger.debug(f"No completed topics left for user {user_id}, removed keyboard")
                context.user_data["state"] = None
            else:
                await query.message.reply_text(
                    "–¢–µ–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. üòø –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞ —Å –ø–æ–º–æ—â—å—é '–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–µ–º—É'.",
                    reply_markup=MAIN_KEYBOARD
                )
                context.user_data["state"] = None
        except Exception as e:
            logger.error(f"Error restoring completed topic {completed_topic_id} for user {user_id}: {e}")
            await query.message.reply_text(
                "–û–π, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–µ–º—ã. üòî –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞!",
                reply_markup=MAIN_KEYBOARD
            )
    elif data.startswith("category_progress:"):
        category_id = data.split("category_progress:")[1]
        user = db.get_user(user_id)
        if not user:
            await query.message.reply_text(
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å —Å –ø–æ–º–æ—â—å—é /start –∏–ª–∏ /tz.",
                reply_markup=ReplyKeyboardMarkup([["/tz"]], resize_keyboard=True)
            )
            await query.answer()
            return
        category_id = None if category_id == "none" else int(category_id)
        await show_category_progress(update, context, category_id, user.timezone)
        await query.answer()
    elif data == "back_to_progress":
        user_id = update.effective_user.id
        categories = db.get_categories(user_id)
        keyboard = [
            [InlineKeyboardButton(category.category_name, callback_data=f"category_progress:{category.category_id}")]
            for category in categories
        ]
        keyboard.append([InlineKeyboardButton("üìÅ –ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏", callback_data="category_progress:none")])
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.message.edit_text(
            "–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞:",
            reply_markup=reply_markup
        )
        context.user_data["state"] = "awaiting_category_progress"
        logger.debug(f"User {user_id} returned to category selection")
        await query.answer()
    elif data.startswith("category_action:"):
        action = data.split("category_action:")[1]
        if action == "create":
            await query.message.reply_text(
                "–ù–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:",
                reply_markup=ReplyKeyboardMarkup([["–û—Ç–º–µ–Ω–∞"]], resize_keyboard=True)
            )
            context.user_data["state"] = "awaiting_category_name"
        elif action == "rename":
            categories = db.get_categories(user_id)
            if not categories:
                await query.message.reply_text(
                    "–£ —Ç–µ–±—è –Ω–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è! üòø –°–æ–∑–¥–∞–π –Ω–æ–≤—É—é —Å –ø–æ–º–æ—â—å—é '–°–æ–∑–¥–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é'.",
                    reply_markup=MAIN_KEYBOARD
                )
                context.user_data["state"] = None
                return
            keyboard = [
                [InlineKeyboardButton(category.category_name, callback_data=f"rename_category:{category.category_id}")]
                for category in categories
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.message.reply_text(
                "–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è:", reply_markup=reply_markup
            )
            context.user_data["state"] = "awaiting_category_selection"
        elif action == "move":
            user = db.get_user(user_id)
            if not user:
                await query.message.reply_text(
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å —Å –ø–æ–º–æ—â—å—é /start –∏–ª–∏ /tz.",
                    reply_markup=ReplyKeyboardMarkup([["/tz"]], resize_keyboard=True)
                )
                await query.answer()
                return
            topics = db.get_active_topics(user_id, user.timezone, category_id='all')
            if not topics:
                await query.message.reply_text(
                    "–£ —Ç–µ–±—è –Ω–µ—Ç —Ç–µ–º –¥–ª—è –ø–µ—Ä–µ–Ω–æ—Å–∞! üòø",
                    reply_markup=MAIN_KEYBOARD
                )
                context.user_data["state"] = None
                return
            keyboard = [
                [InlineKeyboardButton(
                    f"{topic.topic_name} ({db.get_category(topic.category_id, user_id).category_name if topic.category_id else '–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏'})",
                    callback_data=f"move_topic:{topic.topic_id}"
                )] for topic in topics
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.message.reply_text(
                "–í—ã–±–µ—Ä–∏ —Ç–µ–º—É –¥–ª—è –ø–µ—Ä–µ–Ω–æ—Å–∞:", reply_markup=reply_markup
            )
            context.user_data["state"] = "awaiting_topic_selection_move"
        elif action == "delete":
            categories = db.get_categories(user_id)
            if not categories:
                await query.message.reply_text(
                    "–£ —Ç–µ–±—è –Ω–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è! üòø",
                    reply_markup=MAIN_KEYBOARD
                )
                context.user_data["state"] = None
                return
            keyboard = [
                [InlineKeyboardButton(category.category_name, callback_data=f"delete_category:{category.category_id}")]
                for category in categories
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.message.reply_text(
                "–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=reply_markup
            )
            context.user_data["state"] = "awaiting_category_deletion"
    elif data.startswith("rename_category:"):
        category_id = int(data.split("rename_category:")[1])
        context.user_data["rename_category_id"] = category_id
        await query.message.reply_text(
            "–ù–∞–ø–∏—à–∏ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:",
            reply_markup=ReplyKeyboardMarkup([["–û—Ç–º–µ–Ω–∞"]], resize_keyboard=True)
        )
        context.user_data["state"] = "awaiting_category_rename"
    elif data.startswith("delete_category:"):
        category_id = int(data.split("delete_category:")[1])
        user = db.get_user(user_id)
        if not user:
            await query.message.reply_text(
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å —Å –ø–æ–º–æ—â—å—é /start –∏–ª–∏ /tz.",
                reply_markup=ReplyKeyboardMarkup([["/tz"]], resize_keyboard=True)
            )
            await query.answer()
            return
        try:
            category = db.get_category(category_id, user_id)
            if category:
                topics = db.get_active_topics(user_id, user.timezone, category_id=category_id)
                moved_topics = []
                if topics:
                    for topic in topics:
                        db.move_topic_to_category(topic.topic_id, user_id, None)
                        moved_topics.append(topic.topic_name)
                        logger.debug(f"Moved topic '{topic.topic_name}' to '–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏' for user {user_id}")
                db.delete_category(category_id, user_id)
                if moved_topics:
                    topics_list = ", ".join(f"'{topic}'" for topic in moved_topics)
                    await query.message.reply_text(
                        f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è '{category.category_name}' —É–¥–∞–ª–µ–Ω–∞! üò∫\n"
                        f"–¢–µ–º—ã {topics_list} –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω—ã –≤ '–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏'.",
                        reply_markup=MAIN_KEYBOARD
                    )
                else:
                    await query.message.reply_text(
                        f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è '{category.category_name}' —É–¥–∞–ª–µ–Ω–∞! üò∫",
                        reply_markup=MAIN_KEYBOARD
                    )
                context.user_data["state"] = None
            else:
                await query.message.reply_text(
                    "–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. üòø –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞!", reply_markup=MAIN_KEYBOARD
                )
                context.user_data["state"] = None
        except Exception as e:
            logger.error(f"Error deleting category {category_id} for user {user_id}: {e}")
            await query.message.reply_text(
                "–û–π, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏. üòî –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞!",
                reply_markup=MAIN_KEYBOARD
            )
    elif data.startswith("create_category_add:"):
        decision = data.split("create_category_add:")[1]
        if decision == "yes":
            user = db.get_user(user_id)
            if not user:
                await query.message.reply_text(
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å —Å –ø–æ–º–æ—â—å—é /start –∏–ª–∏ /tz.",
                    reply_markup=ReplyKeyboardMarkup([["/tz"]], resize_keyboard=True)
                )
                await query.answer()
                return
            topics = db.get_active_topics(user_id, user.timezone, category_id='all')
            if not topics:
                await query.message.reply_text(
                    "–£ —Ç–µ–±—è –Ω–µ—Ç —Ç–µ–º –¥–ª—è –ø–µ—Ä–µ–Ω–æ—Å–∞! üòø",
                    reply_markup=MAIN_KEYBOARD
                )
                context.user_data["state"] = None
                return
            keyboard = [
                [InlineKeyboardButton(
                    f"{topic.topic_name} ({db.get_category(topic.category_id, user_id).category_name if topic.category_id else '–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏'})",
                    callback_data=f"move_topic:{topic.topic_id}"
                )] for topic in topics
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.message.reply_text(
                "–í—ã–±–µ—Ä–∏ —Ç–µ–º—É –¥–ª—è –ø–µ—Ä–µ–Ω–æ—Å–∞ –≤ –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=reply_markup
            )
            context.user_data["state"] = "awaiting_topic_selection_move"
        else:
            await query.message.reply_text(
                "–•–æ—Ä–æ—à–æ, –∫–∞—Ç–µ–≥–æ—Ä–∏—è —Å–æ–∑–¥–∞–Ω–∞ –±–µ–∑ —Ç–µ–º! üò∫",
                reply_markup=MAIN_KEYBOARD
            )
            context.user_data["state"] = None
    elif data.startswith("move_topic:"):
        topic_id = int(data.split("move_topic:")[1])
        context.user_data["move_topic_id"] = topic_id
        categories = db.get_categories(user_id)
        if not categories:
            await query.message.reply_text(
                "–£ —Ç–µ–±—è –Ω–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è –ø–µ—Ä–µ–Ω–æ—Å–∞! üòø –°–æ–∑–¥–∞–π –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Å–Ω–∞—á–∞–ª–∞.",
                reply_markup=MAIN_KEYBOARD
            )
            context.user_data["state"] = None
            return
        keyboard = [
            [InlineKeyboardButton(category.category_name, callback_data=f"move_to_category:{category.category_id}")]
            for category in categories
        ]
        keyboard.append([InlineKeyboardButton("–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏", callback_data="move_to_category:none")])
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.message.reply_text(
            "–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –ø–µ—Ä–µ–Ω–æ—Å–∞ —Ç–µ–º—ã:", reply_markup=reply_markup
        )
        context.user_data["state"] = "awaiting_category_selection_move"
    elif data.startswith("move_to_category:"):
        category_id = data.split("move_to_category:")[1]
        topic_id = context.user_data.get("move_topic_id")
        if not topic_id:
            await query.message.reply_text(
                "–û–π, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. üòî –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞ —Å –ø–æ–º–æ—â—å—é '–ö–∞—Ç–µ–≥–æ—Ä–∏–∏' -> '–ü–µ—Ä–µ–Ω–µ—Å—Ç–∏ —Ç–µ–º—É'.",
                reply_markup=MAIN_KEYBOARD
            )
            context.user_data["state"] = None
            return
        try:
            user = db.get_user(user_id)
            if not user:
                await query.message.reply_text(
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å —Å –ø–æ–º–æ—â—å—é /start –∏–ª–∏ /tz.",
                    reply_markup=ReplyKeyboardMarkup([["/tz"]], resize_keyboard=True)
                )
                await query.answer()
                return
            topic = db.get_topic(topic_id, user_id, user.timezone)
            if topic:
                category_id = None if category_id == "none" else int(category_id)
                db.move_topic_to_category(topic_id, user_id, category_id)
                category_name = db.get_category(category_id, user_id).category_name if category_id else "–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"
                await query.message.reply_text(
                    f"–¢–µ–º–∞ '{topic.topic_name}' –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–∞ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—é '{category_name}'! üò∫",
                    reply_markup=MAIN_KEYBOARD
                )
                context.user_data["state"] = None
                context.user_data.pop("move_topic_id", None)
            else:
                await query.message.reply_text(
                    "–¢–µ–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. üòø –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞!", reply_markup=MAIN_KEYBOARD
                )
                context.user_data["state"] = None
        except Exception as e:
            logger.error(f"Error moving topic {topic_id} to category {category_id} for user {user_id}: {e}")
            await query.message.reply_text(
                "–û–π, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø—Ä–∏ –ø–µ—Ä–µ–Ω–æ—Å–µ —Ç–µ–º—ã. üòî –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞!",
                reply_markup=MAIN_KEYBOARD
            )
    elif data.startswith("add_topic_category:"):
        category_id = data.split("add_topic_category:")[1]
        topic_name = context.user_data.get("new_topic_name")
        if not topic_name:
            await query.message.reply_text(
                "–û–π, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. üòî –ü–æ–ø—Ä–æ–±—É–π –¥–æ–±–∞–≤–∏—Ç—å —Ç–µ–º—É –∑–∞–Ω–æ–≤–æ —Å –ø–æ–º–æ—â—å—é '–î–æ–±–∞–≤–∏—Ç—å —Ç–µ–º—É'.",
                reply_markup=MAIN_KEYBOARD
            )
            context.user_data["state"] = None
            return
        try:
            user = db.get_user(user_id)
            if not user:
                await query.message.reply_text(
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å —Å –ø–æ–º–æ—â—å—é /start –∏–ª–∏ /tz.",
                    reply_markup=ReplyKeyboardMarkup([["/tz"]], resize_keyboard=True)
                )
                await query.answer()
                return
            category_id = None if category_id == "none" else int(category_id)
            topic_id, reminder_id = db.add_topic(user_id, topic_name, user.timezone, category_id=category_id)
            tz = pytz.timezone(user.timezone)
            reminder_time = datetime.now(tz) + timedelta(hours=1)
            scheduler.add_job(
                send_reminder,
                "date",
                run_date=reminder_time,
                args=[context, user_id, topic_name, reminder_id],
                id=f"reminder_{reminder_id}_{user_id}",
                timezone=tz
            )
            logger.debug(f"Scheduled reminder {reminder_id} for topic '{topic_name}' at {reminder_time.isoformat()}")
            category_name = db.get_category(category_id, user_id).category_name if category_id else "–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"
            await query.message.reply_text(
                f"–¢–µ–º–∞ '{topic_name}' –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—é '{category_name}'! üò∫ –ü–µ—Ä–≤–æ–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 1 —á–∞—Å.",
                reply_markup=MAIN_KEYBOARD
            )
            context.user_data["state"] = None
            context.user_data.pop("new_topic_name", None)
            logger.debug(f"User {user_id} added topic '{topic_name}' with reminder {reminder_id}")
        except Exception as e:
            logger.error(f"Error adding topic '{topic_name}' for user {user_id}: {e}")
            await query.message.reply_text(
                "–û–π, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–µ–º—ã. üòî –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞!",
                reply_markup=MAIN_KEYBOARD
            )
    elif data.startswith("repeated:"):
        reminder_id = int(data.split("repeated:")[1])
        user = db.get_user(user_id)
        if not user:
            await query.message.reply_text(
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å —Å –ø–æ–º–æ—â—å—é /start –∏–ª–∏ /tz.",
                reply_markup=ReplyKeyboardMarkup([["/tz"]], resize_keyboard=True)
            )
            await query.answer()
            return
        try:
            topic = db.get_topic_by_reminder_id(reminder_id, user_id, user.timezone)
            if not topic:
                await query.message.reply_text(
                    f"–¢–µ–º–∞ –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. üòø –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞!",
                    reply_markup=MAIN_KEYBOARD
                )
                await query.answer()
                return
            result = db.mark_topic_repeated(user_id, topic.topic_name, user.timezone)
            if not result:
                logger.error(f"Topic '{topic.topic_name}' not found for user {user_id}")
                await query.message.reply_text(
                    f"–¢–µ–º–∞ '{topic.topic_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. üòø –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞!",
                    reply_markup=MAIN_KEYBOARD
                )
                await query.answer()
                return
            topic_id, completed_repetitions, next_reminder_time, new_reminder_id = result
            topic = db.get_topic(topic_id, user_id, user.timezone)
            if not topic:
                logger.error(f"Topic {topic_id} not found after marking repeated for user {user_id}")
                await query.message.reply_text(
                    f"–¢–µ–º–∞ '{topic.topic_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è. üòø –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞!",
                    reply_markup=MAIN_KEYBOARD
                )
                await query.answer()
                return
            total_repetitions = 6
            progress_percentage = (completed_repetitions / total_repetitions) * 100
            progress_bar = "‚ñà" * int(completed_repetitions) + "‚ñë" * (total_repetitions - completed_repetitions)
            tz = pytz.timezone(user.timezone)
            if completed_repetitions < total_repetitions:
                next_reminder_str = next_reminder_time.astimezone(tz).strftime("%d.%m.%Y %H:%M")
                if new_reminder_id:
                    scheduler.add_job(
                        send_reminder,
                        "date",
                        run_date=next_reminder_time,
                        args=[context, user_id, topic.topic_name, new_reminder_id],
                        id=f"reminder_{new_reminder_id}_{user_id}",
                        timezone=tz
                    )
                    logger.debug(f"Scheduled new reminder {new_reminder_id} for topic '{topic.topic_name}' at {next_reminder_time.isoformat()}")
                await query.message.reply_text(
                    f"–¢–µ–º–∞ '{topic.topic_name}' –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –ø–æ–≤—Ç–æ—Ä—ë–Ω–Ω–∞—è! üò∫\n"
                    f"–ó–∞–≤–µ—Ä—à–µ–Ω–æ: {completed_repetitions}/{total_repetitions} –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π\n"
                    f"–°–ª–µ–¥—É—é—â–µ–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ: {next_reminder_str}\n"
                    f"–ü—Ä–æ–≥—Ä–µ—Å—Å: {progress_bar} {progress_percentage:.1f}%",
                    reply_markup=MAIN_KEYBOARD
                )
            else:
                await query.message.reply_text(
                    f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è—é, —Ç—ã –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—Å–≤–æ–∏–ª —Ç–µ–º—É '{topic.topic_name}'! üèÜ\n"
                    f"–ó–∞–≤–µ—Ä—à–µ–Ω–æ: {completed_repetitions}/{total_repetitions} –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π\n"
                    f"–ü—Ä–æ–≥—Ä–µ—Å—Å: {progress_bar} {progress_percentage:.1f}%\n"
                    f"–ï—Å–ª–∏ –∑–∞—Ö–æ—á–µ—à—å –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –µ—ë –∑–∞–Ω–æ–≤–æ, –∏—Å–ø–æ–ª—å–∑—É–π '–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–µ–º—É'. üò∫",
                    reply_markup=MAIN_KEYBOARD
                )
            await query.message.edit_reply_markup(reply_markup=None)
            await query.answer()
            logger.debug(f"User {user_id} marked topic '{topic.topic_name}' as repeated")
        except Exception as e:
            logger.error(f"Error processing repeated callback for reminder {reminder_id} for user {user_id}: {e}")
            await query.message.reply_text(
                "–û–π, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø—Ä–∏ –æ—Ç–º–µ—Ç–∫–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è. üòî –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞!",
                reply_markup=MAIN_KEYBOARD
            )
            await query.answer()
    else:
        await query.answer()

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    text = update.message.text
    user = db.get_user(user_id)

    if not user:
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å —Å –ø–æ–º–æ—â—å—é /start –∏–ª–∏ /tz.",
            reply_markup=ReplyKeyboardMarkup([["/tz"]], resize_keyboard=True)
        )
        return

    if context.user_data.get("state") == "awaiting_timezone":
        logger.debug(f"User {user_id} sent timezone: {text}")
        timezone = parse_utc_offset(text)
        if timezone:
            try:
                pytz.timezone(timezone)
                db.save_user(user_id, update.effective_user.username or "", timezone)
                logger.debug(f"User {user_id} saved with timezone {timezone} (from UTC offset {text})")
                await update.message.reply_text(
                    f"–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å {timezone} (UTC{text}) —Å–æ—Ö—Ä–∞–Ω–µ–Ω! üò∫",
                    reply_markup=MAIN_KEYBOARD
                )
                context.user_data["state"] = None
                return
            except Exception as e:
                logger.error(f"Error validating UTC timezone {timezone}: {str(e)}")
        try:
            pytz.timezone(text)
            db.save_user(user_id, update.effective_user.username or "", text)
            logger.debug(f"User {user_id} saved with timezone {text}")
            await update.message.reply_text(
                f"–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å {text} —Å–æ—Ö—Ä–∞–Ω–µ–Ω! üò∫",
                reply_markup=MAIN_KEYBOARD
            )
            context.user_data["state"] = None
        except Exception as e:
            logger.error(f"Error saving user timezone: {str(e)}")
            await update.message.reply_text(
                "–û–π, —á—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫ —Å —á–∞—Å–æ–≤—ã–º –ø–æ—è—Å–æ–º. üòî –ü–æ–ø—Ä–æ–±—É–π –Ω–∞–∑–≤–∞–Ω–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'Europe/Moscow') –∏–ª–∏ —Å–º–µ—â–µ–Ω–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'UTC+8' –∏–ª–∏ '+8').",
                reply_markup=MAIN_KEYBOARD
            )
        return

    if context.user_data.get("state") == "awaiting_category_name":
        if text == "–û—Ç–º–µ–Ω–∞":
            context.user_data["state"] = None
            context.user_data.clear()
            await update.message.reply_text(
                "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ! üò∫",
                reply_markup=MAIN_KEYBOARD
            )
            logger.debug(f"User {user_id} cancelled category creation")
            return
        logger.debug(f"User {user_id} sent category name: {text}")
        try:
            category_id = db.add_category(user_id, text)
            context.user_data["new_category_id"] = category_id
            keyboard = [
                [InlineKeyboardButton("–î–∞", callback_data=f"create_category_add:yes")],
                [InlineKeyboardButton("–ù–µ—Ç", callback_data=f"create_category_add:no")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await update.message.reply_text(
                f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è '{text}' —Å–æ–∑–¥–∞–Ω–∞! –î–æ–±–∞–≤–∏—Ç—å –≤ –Ω–µ—ë —Ç–µ–º—ã?", reply_markup=reply_markup
            )
            context.user_data["state"] = "awaiting_category_add_decision"
        except Exception as e:
            logger.error(f"Error creating category '{text}' for user {user_id}: {e}")
            await update.message.reply_text(
                "–û–π, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏. üòî –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞!",
                reply_markup=MAIN_KEYBOARD
            )
            context.user_data["state"] = None
        return

    if context.user_data.get("state") == "awaiting_category_rename":
        if text == "–û—Ç–º–µ–Ω–∞":
            context.user_data["state"] = None
            context.user_data.pop("rename_category_id", None)
            await update.message.reply_text(
                "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ! üò∫",
                reply_markup=MAIN_KEYBOARD
            )
            logger.debug(f"User {user_id} cancelled category rename")
            return
        logger.debug(f"User {user_id} sent new category name: {text}")
        category_id = context.user_data.get("rename_category_id")
        try:
            category = db.get_category(category_id, user_id)
            if category and db.rename_category(category_id, user_id, text):
                await update.message.reply_text(
                    f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è '{category.category_name}' –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∞ –≤ '{text}'! üò∫",
                    reply_markup=MAIN_KEYBOARD
                )
                context.user_data["state"] = None
                context.user_data.pop("rename_category_id", None)
            else:
                await update.message.reply_text(
                    "–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. üòø –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞!", reply_markup=MAIN_KEYBOARD
                )
        except Exception as e:
            logger.error(f"Error renaming category {category_id} for user {user_id}: {e}")
            await update.message.reply_text(
                "–û–π, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø—Ä–∏ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏. üòî –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞!",
                reply_markup=MAIN_KEYBOARD
            )
        context.user_data["state"] = None
        return

    if context.user_data.get("state") in ["awaiting_category_action", "awaiting_topic_selection_move", "awaiting_category_selection"]:
        context.user_data["state"] = None
        context.user_data.clear()
        logger.debug(f"User {user_id} exited state {context.user_data.get('state')} due to new command")

    if text.startswith("–ü–æ–≤—Ç–æ—Ä–∏–ª "):
        logger.debug(f"User {user_id} sent repeat command: {text}")
        topic_name = text[len("–ü–æ–≤—Ç–æ—Ä–∏–ª "):].strip()
        try:
            result = db.mark_topic_repeated(user_id, topic_name, user.timezone)
            if not result:
                logger.error(f"Topic '{topic_name}' not found for user {user_id}")
                await update.message.reply_text(
                    f"–¢–µ–º–∞ '{topic_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. üòø –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞!",
                    reply_markup=MAIN_KEYBOARD
                )
                return
            topic_id, completed_repetitions, next_reminder_time, reminder_id = result
            topic = db.get_topic(topic_id, user_id, user.timezone)
            if not topic:
                logger.error(f"Topic {topic_id} not found after marking repeated for user {user_id}")
                await update.message.reply_text(
                    f"–¢–µ–º–∞ '{topic_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è. üòø –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞!",
                    reply_markup=MAIN_KEYBOARD
                )
                return
            total_repetitions = 6
            progress_percentage = (completed_repetitions / total_repetitions) * 100
            progress_bar = "‚ñà" * int(completed_repetitions) + "‚ñë" * (total_repetitions - completed_repetitions)
            tz = pytz.timezone(user.timezone)
            if completed_repetitions < total_repetitions:
                next_reminder_str = next_reminder_time.strftime("%d.%m.%Y %H:%M")
                if reminder_id:
                    scheduler.add_job(
                        send_reminder,
                        "date",
                        run_date=next_reminder_time,
                        args=[context, user_id, topic_name, reminder_id],
                        id=f"reminder_{reminder_id}_{user_id}",
                        timezone=tz
                    )
                    logger.debug(f"Scheduled new reminder {reminder_id} for topic '{topic_name}' at {next_reminder_time.isoformat()}")
                await update.message.reply_text(
                    f"–¢–µ–º–∞ '{topic_name}' –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –ø–æ–≤—Ç–æ—Ä—ë–Ω–Ω–∞—è! üò∫\n"
                    f"–ó–∞–≤–µ—Ä—à–µ–Ω–æ: {completed_repetitions}/{total_repetitions} –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π\n"
                    f"–°–ª–µ–¥—É—é—â–µ–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ: {next_reminder_str}\n"
                    f"–ü—Ä–æ–≥—Ä–µ—Å—Å: {progress_bar} {progress_percentage:.1f}%",
                    reply_markup=MAIN_KEYBOARD
                )
            else:
                await update.message.reply_text(
                    f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è—é, —Ç—ã –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—Å–≤–æ–∏–ª —Ç–µ–º—É '{topic_name}'! üèÜ\n"
                    f"–ó–∞–≤–µ—Ä—à–µ–Ω–æ: {completed_repetitions}/{total_repetitions} –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π\n"
                    f"–ü—Ä–æ–≥—Ä–µ—Å—Å: {progress_bar} {progress_percentage:.1f}%\n"
                    f"–ï—Å–ª–∏ –∑–∞—Ö–æ—á–µ—à—å –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –µ—ë –∑–∞–Ω–æ–≤–æ, –∏—Å–ø–æ–ª—å–∑—É–π '–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–µ–º—É'. üò∫",
                    reply_markup=MAIN_KEYBOARD
                )
            logger.debug(f"User {user_id} marked topic '{topic_name}' as repeated")
        except Exception as e:
            logger.error(f"Error marking topic '{topic_name}' as repeated for user {user_id}: {str(e)}")
            await update.message.reply_text(
                "–û–π, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø—Ä–∏ –æ—Ç–º–µ—Ç–∫–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è. üòî –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞!",
                reply_markup=MAIN_KEYBOARD
            )
    elif text == "–ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å":
        logger.debug(f"User {user_id} requested progress")
        await show_progress(update, context)
    elif text == "–î–æ–±–∞–≤–∏—Ç—å —Ç–µ–º—É":
        logger.debug(f"User {user_id} requested to add topic")
        context.user_data["state"] = "awaiting_topic_name"
        await update.message.reply_text(
            "–ù–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–º—ã, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—á–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å! üòä",
            reply_markup=ReplyKeyboardMarkup([["–û—Ç–º–µ–Ω–∞"]], resize_keyboard=True)
        )
        logger.debug(f"User {user_id} prompted to enter topic name")
    elif text == "–£–¥–∞–ª–∏—Ç—å —Ç–µ–º—É":
        logger.debug(f"User {user_id} requested to delete topic")
        topics = db.get_active_topics(user_id, user.timezone, category_id='all')
        if not topics:
            await update.message.reply_text(
                "–£ —Ç–µ–±—è –Ω–µ—Ç —Ç–µ–º –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è! üòø",
                reply_markup=MAIN_KEYBOARD
            )
            return
        keyboard = [
            [InlineKeyboardButton(
                f"{topic.topic_name} ({db.get_category(topic.category_id, user_id).category_name if topic.category_id else 'üìÅ –ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏'})",
                callback_data=f"delete:{topic.topic_id}"
            )] for topic in topics
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏ —Ç–µ–º—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è (–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±—É–¥–µ—Ç –Ω–µ–ª—å–∑—è):", reply_markup=reply_markup
        )
        context.user_data["state"] = "awaiting_topic_deletion"
        logger.debug(f"User {user_id} prompted to select topic for deletion")
    elif text == "–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–µ–º—É":
        logger.debug(f"User {user_id} requested to restore topic")
        completed_topics = db.get_completed_topics(user_id)
        if not completed_topics:
            await update.message.reply_text(
                "–£ —Ç–µ–±—è –Ω–µ—Ç –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö —Ç–µ–º –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è! üò∫",
                reply_markup=MAIN_KEYBOARD
            )
            return
        keyboard = [
            [InlineKeyboardButton(topic.topic_name, callback_data=f"restore:{topic.completed_topic_id}")]
            for topic in completed_topics
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—É—é —Ç–µ–º—É –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è:", reply_markup=reply_markup
        )
        context.user_data["state"] = "awaiting_topic_restoration"
        logger.debug(f"User {user_id} prompted to select completed topic for restoration")
    elif text == "–ö–∞—Ç–µ–≥–æ—Ä–∏–∏":
        logger.debug(f"User {user_id} requested categories menu")
        keyboard = [
            [
                InlineKeyboardButton("–°–æ–∑–¥–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é", callback_data="category_action:create"),
                InlineKeyboardButton("–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é", callback_data="category_action:rename"),
            ],
            [
                InlineKeyboardButton("–ü–µ—Ä–µ–Ω–µ—Å—Ç–∏ —Ç–µ–º—É", callback_data="category_action:move"),
                InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é", callback_data="category_action:delete"),
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏:", reply_markup=reply_markup
        )
        context.user_data["state"] = "awaiting_category_action"
        logger.debug(f"User {user_id} prompted to select category action")
    elif text == "–û—Ç–º–µ–Ω–∞":
        context.user_data["state"] = None
        context.user_data.clear()
        await update.message.reply_text(
            "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ! üò∫",
            reply_markup=MAIN_KEYBOARD
        )
        logger.debug(f"User {user_id} cancelled action")
    elif context.user_data.get("state") == "awaiting_topic_name":
        if text == "–û—Ç–º–µ–Ω–∞":
            context.user_data["state"] = None
            context.user_data.clear()
            await update.message.reply_text(
                "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ! üò∫",
                reply_markup=MAIN_KEYBOARD
            )
            logger.debug(f"User {user_id} cancelled topic creation")
            return
        logger.debug(f"User {user_id} sent text: {text}, state: awaiting_topic_name")
        context.user_data["new_topic_name"] = text
        categories = db.get_categories(user_id)
        keyboard = [
            [InlineKeyboardButton(category.category_name, callback_data=f"add_topic_category:{category.category_id}")]
            for category in categories
        ]
        keyboard.append([InlineKeyboardButton("–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏", callback_data="add_topic_category:none")])
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —Ç–µ–º—ã:", reply_markup=reply_markup
        )
        context.user_data["state"] = "awaiting_topic_category"
    else:
        await update.message.reply_text(
            "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. üòø",
            reply_markup=MAIN_KEYBOARD
        )

async def send_reminder(context: ContextTypes.DEFAULT_TYPE, user_id: int, topic_name: str, reminder_id: int):
    user = db.get_user(user_id)
    if not user:
        logger.warning(f"User {user_id} not found for reminder {reminder_id}")
        return
    try:
        topic = db.get_topic_by_reminder_id(reminder_id, user_id, user.timezone)
        if not topic:
            logger.warning(f"Topic for reminder {reminder_id} not found for user {user_id}")
            return
        keyboard = [[InlineKeyboardButton("–ü–æ–≤—Ç–æ—Ä–∏–ª!", callback_data=f"repeated:{reminder_id}")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await context.bot.send_message(
            chat_id=user_id,
            text=f"‚è∞ –ü–æ—Ä–∞ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å —Ç–µ–º—É '{topic_name}'! üò∫",
            reply_markup=reply_markup
        )
        logger.debug(f"Sent reminder {reminder_id} for topic '{topic_name}' to user {user_id}")
    except Exception as e:
        logger.error(f"Error sending reminder {reminder_id} to user {user_id}: {str(e)}")

async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.error(f"Update {update} caused error {context.error}")
    if update and update.effective_user:
        await context.bot.send_message(
            chat_id=update.effective_user.id,
            text="–û–π, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫! üòø –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π /reset.",
            reply_markup=MAIN_KEYBOARD
        )

async def init_scheduler(context: ContextTypes.DEFAULT_TYPE):
    users = db.get_all_users()
    for user in users:
        reminders = db.get_reminders(user.user_id, user.timezone)
        tz = pytz.timezone(user.timezone)
        for reminder in reminders:
            topic = db.get_topic_by_reminder_id(reminder.reminder_id, user.user_id, user.timezone)
            if topic and reminder.scheduled_time > datetime.now(tz):
                scheduler.add_job(
                    send_reminder,
                    "date",
                    run_date=reminder.scheduled_time.astimezone(tz),
                    args=[context, user.user_id, topic.topic_name, reminder.reminder_id],
                    id=f"reminder_{reminder.reminder_id}_{user.user_id}",
                    timezone=tz
                )
                logger.debug(
                    f"Scheduled reminder {reminder.reminder_id} for topic '{topic.topic_name}' "
                    f"for user {user.user_id} at {reminder.scheduled_time.isoformat()}"
                )

async def main():
    try:
        app = Application.builder().token(BOT_TOKEN).build()
    except InvalidToken:
        logger.error("Invalid bot token provided")
        raise

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("tz", handle_timezone))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(CommandHandler("reset", reset))
    app.add_handler(CallbackQueryHandler(handle_callback_query))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    app.add_error_handler(error_handler)

    scheduler.start()
    logger.debug("Scheduler started")

    await init_scheduler(app)
    logger.debug("Initialized scheduler with existing reminders")

    app_runner = web.AppRunner(web.Application())
    await app_runner.setup()
    site = web.TCPSite(app_runner, "0.0.0.0", int(os.getenv("PORT", 8080)))
    await site.start()
    logger.debug(f"Web server started on port {os.getenv('PORT', 8080)}")

    await app.initialize()
    await app.start()
    await app.updater.start_polling()
    logger.debug("Bot polling started")

    try:
        while True:
            await asyncio.sleep(3600)
    except KeyboardInterrupt:
        logger.info("Shutting down bot...")
        await app.updater.stop()
        await app.stop()
        await app_runner.cleanup()
        scheduler.shutdown()
        logger.debug("Bot and web server stopped")

if __name__ == "__main__":
    asyncio.run(main())